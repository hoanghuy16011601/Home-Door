
PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001b80  00001c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800114  00800114  00001c28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003007  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7b  00000000  00000000  00004f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e5  00000000  00000000  00005ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  000078b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a0  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002048  00000000  00000000  000089a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 94 00 	jmp	0x128	; 0x128 <__ctors_end>
       4:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_1>
       8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_5>
      18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_11>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_14>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      4c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	57 45       	sbci	r21, 0x57	; 87
      6a:	4c 43       	sbci	r20, 0x3C	; 60
      6c:	4f 4d       	sbci	r20, 0xDF	; 223
      6e:	45 00       	.word	0x0045	; ????

00000070 <__c.2413>:
      70:	53 55 43 43 45 53 53 46 55 4c 4c 59 00              SUCCESSFULLY.

0000007d <__c.2403>:
      7d:	49 44 20 48 41 53 20 53 41 56 45 44 00              ID HAS SAVED.

0000008a <__c.2391>:
      8a:	4e 45 57 20 49 44 3a 00                             NEW ID:.

00000092 <__c.2389>:
      92:	46 55 4c 4c 20 53 54 41 43 4b 00                    FULL STACK.

0000009d <__c.2382>:
      9d:	45 52 52 4f 52 00                                   ERROR.

000000a3 <__c.2376>:
      a3:	50 41 53 53 20 43 48 41 4e 47 45 44 00              PASS CHANGED.

000000b0 <__c.2369>:
      b0:	4e 45 57 20 50 41 53 53 20 41 47 41 49 4e 00        NEW PASS AGAIN.

000000bf <__c.2359>:
      bf:	4e 45 57 20 50 41 53 53 00                          NEW PASS.

000000c8 <__c.2351>:
      c8:	57 41 52 4e 49 4e 47 00                             WARNING.

000000d0 <__c.2344>:
      d0:	57 52 4f 4e 47 20 50 41 53 53 57 4f 52 44 00        WRONG PASSWORD.

000000df <__c.2339>:
      df:	57 52 4f 4e 47 20 50 41 53 53 57 4f 52 44 00        WRONG PASSWORD.

000000ee <__c.2336>:
      ee:	57 52 4f 4e 47 20 50 41 53 53 57 4f 52 44 00        WRONG PASSWORD.

000000fd <__c.2327>:
      fd:	45 4e 54 45 52 20 50 41 53 53 57 4f 52 44 00        ENTER PASSWORD.

0000010c <__c.2317>:
     10c:	46 55 4c 4c 20 53 52 41 4d 00                       FULL SRAM.

00000116 <__c.2307>:
     116:	57 52 4f 4e 47 20 43 41 52 44 00                    WRONG CARD.

00000121 <__c.2286>:
     121:	48 45 4c 4c 4f 00 00                                HELLO..

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d8 e0       	ldi	r29, 0x08	; 8
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a0 e0       	ldi	r26, 0x00	; 0
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	e0 e8       	ldi	r30, 0x80	; 128
     13c:	fb e1       	ldi	r31, 0x1B	; 27
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a4 31       	cpi	r26, 0x14	; 20
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	a4 e1       	ldi	r26, 0x14	; 20
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	ae 32       	cpi	r26, 0x2E	; 46
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <main>
     15e:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <_exit>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <waitkey>:


void waitkey()
{
	unsigned char value_scan = 0xfe;
	for (int i=0;i<4;i++)
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0



void waitkey()
{
	unsigned char value_scan = 0xfe;
     16a:	8e ef       	ldi	r24, 0xFE	; 254
	for (int i=0;i<4;i++)
     16c:	15 c0       	rjmp	.+42     	; 0x198 <waitkey+0x32>
	{
		PORTD = value_scan;
     16e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     170:	95 e0       	ldi	r25, 0x05	; 5
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <waitkey+0xc>
     176:	00 00       	nop
		_delay_us(1);
		if ((PIND & 0XF0)!=0xF0)
     178:	99 b1       	in	r25, 0x09	; 9
     17a:	90 7f       	andi	r25, 0xF0	; 240
     17c:	90 3f       	cpi	r25, 0xF0	; 240
     17e:	41 f0       	breq	.+16     	; 0x190 <waitkey+0x2a>
		{
			key_flag =1;
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <key_flag>
			j = i;
     186:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <j>
			value = value_scan;
     18a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <value>
			break;
     18e:	08 95       	ret
		}
		else
		{
			value_scan = value_scan<<1;
     190:	88 0f       	add	r24, r24
			value_scan +=0x01;
     192:	8f 5f       	subi	r24, 0xFF	; 255


void waitkey()
{
	unsigned char value_scan = 0xfe;
	for (int i=0;i<4;i++)
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	24 30       	cpi	r18, 0x04	; 4
     19a:	31 05       	cpc	r19, r1
     19c:	44 f3       	brlt	.-48     	; 0x16e <waitkey+0x8>
     19e:	08 95       	ret

000001a0 <check_key>:
}

void check_key()
{
	unsigned char value_scan = 0x10;
	for (int i=0;i<4;i++)
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void check_key()
{
	unsigned char value_scan = 0x10;
     1a4:	90 e1       	ldi	r25, 0x10	; 16
	for (int i=0;i<4;i++)
     1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <check_key+0x22>
	{
		if((PIND&value_scan)==0)
     1a8:	89 b1       	in	r24, 0x09	; 9
     1aa:	89 23       	and	r24, r25
     1ac:	39 f4       	brne	.+14     	; 0x1bc <check_key+0x1c>
		{
			k=i+1;
     1ae:	2f 5f       	subi	r18, 0xFF	; 255
     1b0:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <k>
			key_flag_check =1;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <key_flag_check>
			break;
     1ba:	08 95       	ret
		}
		value_scan = value_scan <<1;
     1bc:	99 0f       	add	r25, r25
}

void check_key()
{
	unsigned char value_scan = 0x10;
	for (int i=0;i<4;i++)
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	24 30       	cpi	r18, 0x04	; 4
     1c4:	31 05       	cpc	r19, r1
     1c6:	84 f3       	brlt	.-32     	; 0x1a8 <check_key+0x8>
     1c8:	08 95       	ret

000001ca <find_button>:
	}
}

int find_button()
{
	key_flag_check = 0;
     1ca:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <key_flag_check>
	key_flag = 0;
     1ce:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <key_flag>
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <find_button+0xe>
	loop: while(key_flag==0)
	{
		waitkey();
     1d4:	0e 94 b3 00 	call	0x166	; 0x166 <waitkey>

int find_button()
{
	key_flag_check = 0;
	key_flag = 0;
	loop: while(key_flag==0)
     1d8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <key_flag>
     1dc:	88 23       	and	r24, r24
     1de:	d1 f3       	breq	.-12     	; 0x1d4 <find_button+0xa>
	{
		waitkey();
	}
	if (mode_rfid ==1)
     1e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode_rfid>
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	b1 f1       	breq	.+108    	; 0x254 <find_button+0x8a>
	{
		return 99;
	}
	check_key();
     1e8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <check_key>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ec:	2f ef       	ldi	r18, 0xFF	; 255
     1ee:	83 ec       	ldi	r24, 0xC3	; 195
     1f0:	99 e0       	ldi	r25, 0x09	; 9
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	80 40       	sbci	r24, 0x00	; 0
     1f6:	90 40       	sbci	r25, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <find_button+0x28>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <find_button+0x32>
     1fc:	00 00       	nop
	_delay_ms(200);
	check_key();
     1fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <check_key>
	if (key_flag_check ==0)
     202:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <key_flag_check>
     206:	81 11       	cpse	r24, r1
     208:	03 c0       	rjmp	.+6      	; 0x210 <find_button+0x46>
	{
		key_flag =0;
     20a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <key_flag>
		goto loop;
     20e:	e4 cf       	rjmp	.-56     	; 0x1d8 <find_button+0xe>
	}
	if (k<4&&k>=1)
     210:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <k>
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	84 0f       	add	r24, r20
     218:	83 30       	cpi	r24, 0x03	; 3
     21a:	58 f4       	brcc	.+22     	; 0x232 <find_button+0x68>
	{
		return k+3*j;
     21c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <j>
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	9c 01       	movw	r18, r24
     224:	22 0f       	add	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	28 0f       	add	r18, r24
     22a:	39 1f       	adc	r19, r25
     22c:	24 0f       	add	r18, r20
     22e:	31 1d       	adc	r19, r1
     230:	13 c0       	rjmp	.+38     	; 0x258 <find_button+0x8e>
	}
	if (k==4)
     232:	44 30       	cpi	r20, 0x04	; 4
     234:	71 f4       	brne	.+28     	; 0x252 <find_button+0x88>
	{
		return 5*k+j;
     236:	84 2f       	mov	r24, r20
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	9c 01       	movw	r18, r24
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	22 0f       	add	r18, r18
     242:	33 1f       	adc	r19, r19
     244:	28 0f       	add	r18, r24
     246:	39 1f       	adc	r19, r25
     248:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <j>
     24c:	28 0f       	add	r18, r24
     24e:	31 1d       	adc	r19, r1
     250:	03 c0       	rjmp	.+6      	; 0x258 <find_button+0x8e>
	}
	
}
     252:	08 95       	ret
	{
		waitkey();
	}
	if (mode_rfid ==1)
	{
		return 99;
     254:	23 e6       	ldi	r18, 0x63	; 99
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	82 2f       	mov	r24, r18
     25a:	93 2f       	mov	r25, r19
	if (k==4)
	{
		return 5*k+j;
	}
	
}
     25c:	08 95       	ret

0000025e <external_interrupt>:
#include "external_interrupt.h"
#include <avr/interrupt.h>

void external_interrupt(char mask, char type)
{
	EIMSK |= (1<<mask);
     25e:	9d b3       	in	r25, 0x1d	; 29
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	08 2e       	mov	r0, r24
     266:	02 c0       	rjmp	.+4      	; 0x26c <external_interrupt+0xe>
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <external_interrupt+0xa>
     270:	29 2b       	or	r18, r25
     272:	2d bb       	out	0x1d, r18	; 29
	if (mask == INT0)
     274:	81 11       	cpse	r24, r1
     276:	0e c0       	rjmp	.+28     	; 0x294 <external_interrupt+0x36>
	{
		EICRA |= (type/2 << ISC01)|(type%2 << ISC00);
     278:	e9 e6       	ldi	r30, 0x69	; 105
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	20 81       	ld	r18, Z
     27e:	96 2f       	mov	r25, r22
     280:	96 95       	lsr	r25
     282:	89 2f       	mov	r24, r25
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	61 70       	andi	r22, 0x01	; 1
     28c:	68 2b       	or	r22, r24
     28e:	62 2b       	or	r22, r18
     290:	60 83       	st	Z, r22
     292:	16 c0       	rjmp	.+44     	; 0x2c0 <external_interrupt+0x62>
	}
	else
	{
		EICRA |= (type/2 << ISC11)|(type%2 << ISC10);
     294:	e9 e6       	ldi	r30, 0x69	; 105
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	20 81       	ld	r18, Z
     29a:	86 2f       	mov	r24, r22
     29c:	86 95       	lsr	r24
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	46 2f       	mov	r20, r22
     2ae:	41 70       	andi	r20, 0x01	; 1
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	44 0f       	add	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	44 0f       	add	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	48 2b       	or	r20, r24
     2bc:	42 2b       	or	r20, r18
     2be:	40 83       	st	Z, r20
	}
	sei();
     2c0:	78 94       	sei
     2c2:	08 95       	ret

000002c4 <external_interrupt_stop>:
}

void external_interrupt_stop(char mask)
{
	EIMSK &= ~(1<<mask);
     2c4:	9d b3       	in	r25, 0x1d	; 29
     2c6:	21 e0       	ldi	r18, 0x01	; 1
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <external_interrupt_stop+0xc>
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	8a 95       	dec	r24
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <external_interrupt_stop+0x8>
     2d4:	20 95       	com	r18
     2d6:	29 23       	and	r18, r25
     2d8:	2d bb       	out	0x1d, r18	; 29
     2da:	08 95       	ret

000002dc <pinchange_interrupt>:
}

void pinchange_interrupt(char PORT, char PIN)
{
	PCICR |= (1<<PORT);
     2dc:	e8 e6       	ldi	r30, 0x68	; 104
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	90 81       	ld	r25, Z
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	08 2e       	mov	r0, r24
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <pinchange_interrupt+0x12>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <pinchange_interrupt+0xe>
     2f2:	29 2b       	or	r18, r25
     2f4:	20 83       	st	Z, r18
	if (PORT ==0)
     2f6:	81 11       	cpse	r24, r1
     2f8:	0d c0       	rjmp	.+26     	; 0x314 <pinchange_interrupt+0x38>
	{
		PCMSK0 |= (1<<PIN);
     2fa:	eb e6       	ldi	r30, 0x6B	; 107
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	90 81       	ld	r25, Z
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	06 2e       	mov	r0, r22
     306:	02 c0       	rjmp	.+4      	; 0x30c <pinchange_interrupt+0x30>
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <pinchange_interrupt+0x2c>
     310:	29 2b       	or	r18, r25
     312:	20 83       	st	Z, r18
	}
	if (PORT ==1)
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	69 f4       	brne	.+26     	; 0x332 <pinchange_interrupt+0x56>
	{
		PCMSK1 |= (1<<PIN);
     318:	ec e6       	ldi	r30, 0x6C	; 108
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	90 81       	ld	r25, Z
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	06 2e       	mov	r0, r22
     324:	02 c0       	rjmp	.+4      	; 0x32a <pinchange_interrupt+0x4e>
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <pinchange_interrupt+0x4a>
     32e:	29 2b       	or	r18, r25
     330:	20 83       	st	Z, r18
	}
	if (PORT == 2)
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	61 f4       	brne	.+24     	; 0x34e <pinchange_interrupt+0x72>
	{
		PCMSK2 |= (1<<PIN);
     336:	ed e6       	ldi	r30, 0x6D	; 109
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	20 81       	ld	r18, Z
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	02 c0       	rjmp	.+4      	; 0x346 <pinchange_interrupt+0x6a>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <pinchange_interrupt+0x66>
     34a:	82 2b       	or	r24, r18
     34c:	80 83       	st	Z, r24
	}
	sei();
     34e:	78 94       	sei
     350:	08 95       	ret

00000352 <pinchange_interrupt_stop>:
}

void pinchange_interrupt_stop(char PORT, char PIN)
{
	if (PORT ==0)
     352:	81 11       	cpse	r24, r1
     354:	0e c0       	rjmp	.+28     	; 0x372 <pinchange_interrupt_stop+0x20>
	{
		PCMSK0 &= ~(1<<PIN);
     356:	eb e6       	ldi	r30, 0x6B	; 107
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	90 81       	ld	r25, Z
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	06 2e       	mov	r0, r22
     362:	02 c0       	rjmp	.+4      	; 0x368 <pinchange_interrupt_stop+0x16>
     364:	22 0f       	add	r18, r18
     366:	33 1f       	adc	r19, r19
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <pinchange_interrupt_stop+0x12>
     36c:	20 95       	com	r18
     36e:	29 23       	and	r18, r25
     370:	20 83       	st	Z, r18
	}
	if (PORT ==1)
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	71 f4       	brne	.+28     	; 0x392 <pinchange_interrupt_stop+0x40>
	{
		PCMSK1 &= ~(1<<PIN);
     376:	ec e6       	ldi	r30, 0x6C	; 108
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	90 81       	ld	r25, Z
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	06 2e       	mov	r0, r22
     382:	02 c0       	rjmp	.+4      	; 0x388 <pinchange_interrupt_stop+0x36>
     384:	22 0f       	add	r18, r18
     386:	33 1f       	adc	r19, r19
     388:	0a 94       	dec	r0
     38a:	e2 f7       	brpl	.-8      	; 0x384 <pinchange_interrupt_stop+0x32>
     38c:	20 95       	com	r18
     38e:	29 23       	and	r18, r25
     390:	20 83       	st	Z, r18
	}
	if (PORT == 2)
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	69 f4       	brne	.+26     	; 0x3b0 <pinchange_interrupt_stop+0x5e>
	{
		PCMSK2 &= ~(1<<PIN);
     396:	ed e6       	ldi	r30, 0x6D	; 109
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	20 81       	ld	r18, Z
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <pinchange_interrupt_stop+0x54>
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	6a 95       	dec	r22
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <pinchange_interrupt_stop+0x50>
     3aa:	80 95       	com	r24
     3ac:	82 23       	and	r24, r18
     3ae:	80 83       	st	Z, r24
     3b0:	08 95       	ret

000003b2 <i2c_initialization_master>:
	unsigned char data;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while(!(TWCR&(1<<TWINT)));
	data = TWSR & 0XF8;
	return data;
}
     3b2:	88 e0       	ldi	r24, 0x08	; 8
     3b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3c4:	08 95       	ret

000003c6 <i2c_start>:
     3c6:	84 ea       	ldi	r24, 0xA4	; 164
     3c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3d0:	88 23       	and	r24, r24
     3d2:	e4 f7       	brge	.-8      	; 0x3cc <i2c_start+0x6>
     3d4:	08 95       	ret

000003d6 <i2c_stop>:
     3d6:	84 e9       	ldi	r24, 0x94	; 148
     3d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3dc:	08 95       	ret

000003de <i2c_write_master>:

void i2c_write_master(unsigned char data)
{
	TWDR = data;
     3de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     3e2:	84 e8       	ldi	r24, 0x84	; 132
     3e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT)));
     3e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3ec:	88 23       	and	r24, r24
     3ee:	e4 f7       	brge	.-8      	; 0x3e8 <i2c_write_master+0xa>
}
     3f0:	08 95       	ret

000003f2 <i2c_lcd_command>:
	_delay_us(50);
}


void i2c_lcd_command(unsigned char cmd)
{
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	c8 2f       	mov	r28, r24
	unsigned char data;
	data = (cmd & 0xF0)|0x08;
     3fa:	d8 2f       	mov	r29, r24
     3fc:	d0 7f       	andi	r29, 0xF0	; 240
     3fe:	d8 60       	ori	r29, 0x08	; 8
	i2c_write_master(data);
     400:	8d 2f       	mov	r24, r29
     402:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<RS);
	i2c_write_master(data);
     406:	8d 2f       	mov	r24, r29
     408:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<RW);
     40c:	1d 2f       	mov	r17, r29
     40e:	1c 7f       	andi	r17, 0xFC	; 252
	i2c_write_master(data);
     410:	81 2f       	mov	r24, r17
     412:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<E);
	i2c_write_master(data);
     416:	81 2f       	mov	r24, r17
     418:	84 60       	ori	r24, 0x04	; 4
     41a:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<E);
	i2c_write_master(data);
     41e:	8d 2f       	mov	r24, r29
     420:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     424:	8f e8       	ldi	r24, 0x8F	; 143
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
	_delay_us(200);
	
	data = (cmd<<4)|0x08;
     430:	20 e1       	ldi	r18, 0x10	; 16
     432:	c2 9f       	mul	r28, r18
     434:	c0 01       	movw	r24, r0
     436:	11 24       	eor	r1, r1
     438:	c8 2f       	mov	r28, r24
     43a:	c8 60       	ori	r28, 0x08	; 8
	i2c_write_master(data);
     43c:	8c 2f       	mov	r24, r28
     43e:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<RS);
	i2c_write_master(data);
     442:	8c 2f       	mov	r24, r28
     444:	8e 7f       	andi	r24, 0xFE	; 254
     446:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<RW);
     44a:	dc 2f       	mov	r29, r28
     44c:	dc 7f       	andi	r29, 0xFC	; 252
	i2c_write_master(data);
     44e:	8d 2f       	mov	r24, r29
     450:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<E);
	i2c_write_master(data);
     454:	8d 2f       	mov	r24, r29
     456:	84 60       	ori	r24, 0x04	; 4
     458:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<E);
	i2c_write_master(data);
     45c:	8c 2f       	mov	r24, r28
     45e:	88 7f       	andi	r24, 0xF8	; 248
     460:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	08 95       	ret

0000046c <i2c_lcd_init_power>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	2f e7       	ldi	r18, 0x7F	; 127
     46e:	88 e3       	ldi	r24, 0x38	; 56
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <i2c_lcd_init_power+0x6>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <i2c_lcd_init_power+0x10>
     47c:	00 00       	nop
#define E 2

void i2c_lcd_init_power()
{
	_delay_ms(50);
	i2c_lcd_command(0x30);
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     484:	8f e0       	ldi	r24, 0x0F	; 15
     486:	97 e2       	ldi	r25, 0x27	; 39
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <i2c_lcd_init_power+0x1c>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <i2c_lcd_init_power+0x22>
     48e:	00 00       	nop
	_delay_ms(5);
	i2c_lcd_command(0x30);
     490:	80 e3       	ldi	r24, 0x30	; 48
     492:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     496:	8b e2       	ldi	r24, 0x2B	; 43
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <i2c_lcd_init_power+0x2e>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <i2c_lcd_init_power+0x34>
     4a0:	00 00       	nop
	_delay_us(150);
	i2c_lcd_command(0x32);
     4a2:	82 e3       	ldi	r24, 0x32	; 50
     4a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     4a8:	08 95       	ret

000004aa <i2c_lcd_clear>:
	
}

void i2c_lcd_clear()
{
	i2c_lcd_command(0x01);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b0:	8f e9       	ldi	r24, 0x9F	; 159
     4b2:	9f e0       	ldi	r25, 0x0F	; 15
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <i2c_lcd_clear+0xa>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <i2c_lcd_clear+0x10>
     4ba:	00 00       	nop
     4bc:	08 95       	ret

000004be <i2c_lcd_init>:
	_delay_us(150);
	i2c_lcd_command(0x32);
}

void i2c_lcd_init(unsigned char func_set,unsigned char display_control, unsigned char mode_set)
{
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	d6 2f       	mov	r29, r22
     4c4:	c4 2f       	mov	r28, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c6:	e9 e0       	ldi	r30, 0x09	; 9
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <i2c_lcd_init+0xc>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <i2c_lcd_init+0x12>
     4d0:	00 00       	nop
	_delay_us(133);
	i2c_lcd_command(func_set);
     4d2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     4d6:	89 e0       	ldi	r24, 0x09	; 9
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <i2c_lcd_init+0x1c>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <i2c_lcd_init+0x22>
     4e0:	00 00       	nop
	_delay_us(133);
	i2c_lcd_clear();
     4e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
     4e6:	e5 ed       	ldi	r30, 0xD5	; 213
     4e8:	f4 e1       	ldi	r31, 0x14	; 20
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <i2c_lcd_init+0x2c>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <i2c_lcd_init+0x32>
     4f0:	00 00       	nop
	_delay_us(2667);
	i2c_lcd_command(display_control);
     4f2:	8d 2f       	mov	r24, r29
     4f4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     4f8:	89 e0       	ldi	r24, 0x09	; 9
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <i2c_lcd_init+0x3e>
     500:	00 c0       	rjmp	.+0      	; 0x502 <i2c_lcd_init+0x44>
     502:	00 00       	nop
	_delay_us(133);
	i2c_lcd_command(mode_set);
     504:	8c 2f       	mov	r24, r28
     506:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <i2c_lcd_turnoff>:

void i2c_lcd_turnoff()
{
	i2c_lcd_command(0x28);
     510:	88 e2       	ldi	r24, 0x28	; 40
     512:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
	i2c_lcd_clear();
     516:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_command(0x08);
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
	i2c_lcd_command(0x04);
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     526:	08 95       	ret

00000528 <i2c_lcd_begin>:
	_delay_ms(2);
}

void i2c_lcd_begin(unsigned char position)
{
	i2c_lcd_command(position);
     528:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <i2c_lcd_command>
     52c:	85 e8       	ldi	r24, 0x85	; 133
     52e:	8a 95       	dec	r24
     530:	f1 f7       	brne	.-4      	; 0x52e <i2c_lcd_begin+0x6>
     532:	00 00       	nop
     534:	08 95       	ret

00000536 <i2c_lcd_data>:
	data &= ~(1<<E);
	i2c_write_master(data);
}

void i2c_lcd_data(unsigned char cmd)
{
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	08 2f       	mov	r16, r24
	unsigned char data;
	data = (cmd & 0xF0)|0x08;
     53e:	18 2f       	mov	r17, r24
     540:	10 7f       	andi	r17, 0xF0	; 240
     542:	c1 2f       	mov	r28, r17
     544:	c8 60       	ori	r28, 0x08	; 8
	i2c_write_master(data);
     546:	8c 2f       	mov	r24, r28
     548:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<RS);
	i2c_write_master(data);
     54c:	81 2f       	mov	r24, r17
     54e:	89 60       	ori	r24, 0x09	; 9
     550:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
     554:	1c 2f       	mov	r17, r28
     556:	1d 7f       	andi	r17, 0xFD	; 253
	data &= ~(1<<RW);
	i2c_write_master(data);
     558:	81 2f       	mov	r24, r17
     55a:	81 60       	ori	r24, 0x01	; 1
     55c:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<E);
	i2c_write_master(data);
     560:	81 2f       	mov	r24, r17
     562:	85 60       	ori	r24, 0x05	; 5
     564:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data &= ~(1<<E);
	i2c_write_master(data);
     568:	8c 2f       	mov	r24, r28
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
     570:	8f e8       	ldi	r24, 0x8F	; 143
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <i2c_lcd_data+0x3e>
     578:	00 c0       	rjmp	.+0      	; 0x57a <i2c_lcd_data+0x44>
     57a:	00 00       	nop
	_delay_us(200);
	
	data = (cmd<<4)|0x08;
     57c:	90 e1       	ldi	r25, 0x10	; 16
     57e:	09 9f       	mul	r16, r25
     580:	80 01       	movw	r16, r0
     582:	11 24       	eor	r1, r1
     584:	c0 2f       	mov	r28, r16
     586:	c8 60       	ori	r28, 0x08	; 8
	i2c_write_master(data);
     588:	8c 2f       	mov	r24, r28
     58a:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<RS);
	i2c_write_master(data);
     58e:	80 2f       	mov	r24, r16
     590:	89 60       	ori	r24, 0x09	; 9
     592:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
     596:	1c 2f       	mov	r17, r28
     598:	1d 7f       	andi	r17, 0xFD	; 253
	data &= ~(1<<RW);
	i2c_write_master(data);
     59a:	81 2f       	mov	r24, r17
     59c:	81 60       	ori	r24, 0x01	; 1
     59e:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	data |= (1<<E);
	i2c_write_master(data);
     5a2:	81 2f       	mov	r24, r17
     5a4:	85 60       	ori	r24, 0x05	; 5
     5a6:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
     5aa:	8c 2f       	mov	r24, r28
     5ac:	89 7f       	andi	r24, 0xF9	; 249
	data &= ~(1<<E);
	i2c_write_master(data);
     5ae:	81 60       	ori	r24, 0x01	; 1
     5b0:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
}
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <byte_2_str1>:
}


uint8_t byte_2_str1(uint8_t byte)
{
	uint8_t byte1 = (byte&0xF0)>>4;
     5bc:	82 95       	swap	r24
     5be:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t result1;
	if (byte1<=9)
     5c0:	8a 30       	cpi	r24, 0x0A	; 10
     5c2:	10 f4       	brcc	.+4      	; 0x5c8 <byte_2_str1+0xc>
	{
		result1 = byte1 + 48; 
     5c4:	80 5d       	subi	r24, 0xD0	; 208
     5c6:	08 95       	ret
	}else
	{
		result1 = byte1 + 55; 
     5c8:	89 5c       	subi	r24, 0xC9	; 201
	}
	return result1;
}
     5ca:	08 95       	ret

000005cc <byte_2_str2>:

uint8_t byte_2_str2(uint8_t byte)
{
	uint8_t result2;
	uint8_t byte1 = byte&0x0F;
     5cc:	8f 70       	andi	r24, 0x0F	; 15
	if (byte1<=9)
     5ce:	8a 30       	cpi	r24, 0x0A	; 10
     5d0:	10 f4       	brcc	.+4      	; 0x5d6 <byte_2_str2+0xa>
	{
		result2 = byte1 + 48;
     5d2:	80 5d       	subi	r24, 0xD0	; 208
     5d4:	08 95       	ret
	}else
	{
		result2 = byte1 + 55;
     5d6:	89 5c       	subi	r24, 0xC9	; 201
	}
	return result2;
}
     5d8:	08 95       	ret

000005da <write_eep>:



void write_eep(uint16_t address, unsigned char data)
{
	while(EECR&(1<<EEPE));
     5da:	f9 99       	sbic	0x1f, 1	; 31
     5dc:	fe cf       	rjmp	.-4      	; 0x5da <write_eep>
	EEAR = address;
     5de:	92 bd       	out	0x22, r25	; 34
     5e0:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     5e2:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE);
     5e4:	8f b3       	in	r24, 0x1f	; 31
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);
     5ea:	8f b3       	in	r24, 0x1f	; 31
     5ec:	82 60       	ori	r24, 0x02	; 2
     5ee:	8f bb       	out	0x1f, r24	; 31
     5f0:	08 95       	ret

000005f2 <read_eep>:
}

unsigned char read_eep(uint16_t address)
{
	while(EECR &(1<<EEPE));
     5f2:	f9 99       	sbic	0x1f, 1	; 31
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <read_eep>
	EEAR = address;
     5f6:	92 bd       	out	0x22, r25	; 34
     5f8:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);
     5fa:	8f b3       	in	r24, 0x1f	; 31
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
     600:	80 b5       	in	r24, 0x20	; 32
}
     602:	08 95       	ret

00000604 <showString>:


void showString(PGM_P string)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	fc 01       	movw	r30, r24
	unsigned char c;
	while ((c = pgm_read_byte(string++)) != 0)
     60a:	03 c0       	rjmp	.+6      	; 0x612 <showString+0xe>
	i2c_lcd_data(c);
     60c:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>


void showString(PGM_P string)
{
	unsigned char c;
	while ((c = pgm_read_byte(string++)) != 0)
     610:	fe 01       	movw	r30, r28
     612:	ef 01       	movw	r28, r30
     614:	21 96       	adiw	r28, 0x01	; 1
     616:	84 91       	lpm	r24, Z
     618:	81 11       	cpse	r24, r1
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <showString+0x8>
	i2c_lcd_data(c);
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <compare_string>:


uint8_t compare_string(unsigned char *string1, unsigned char *string2, uint8_t number_char)
{
     622:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<number_char; i++)
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0d c0       	rjmp	.+26     	; 0x642 <compare_string+0x20>
	{
		if (*(string1+i)!= *(string2+i))
     628:	29 2f       	mov	r18, r25
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	fd 01       	movw	r30, r26
     62e:	e2 0f       	add	r30, r18
     630:	f3 1f       	adc	r31, r19
     632:	50 81       	ld	r21, Z
     634:	fb 01       	movw	r30, r22
     636:	e2 0f       	add	r30, r18
     638:	f3 1f       	adc	r31, r19
     63a:	20 81       	ld	r18, Z
     63c:	52 13       	cpse	r21, r18
     63e:	05 c0       	rjmp	.+10     	; 0x64a <compare_string+0x28>
}


uint8_t compare_string(unsigned char *string1, unsigned char *string2, uint8_t number_char)
{
	for (uint8_t i=0; i<number_char; i++)
     640:	9f 5f       	subi	r25, 0xFF	; 255
     642:	94 17       	cp	r25, r20
     644:	88 f3       	brcs	.-30     	; 0x628 <compare_string+0x6>
		if (*(string1+i)!= *(string2+i))
		{
			return 0;
		}
	}
	return 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret
{
	for (uint8_t i=0; i<number_char; i++)
	{
		if (*(string1+i)!= *(string2+i))
		{
			return 0;
     64a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
     64c:	08 95       	ret

0000064e <change_pass>:
	showString(PSTR("WARNING"));
	buzzer();
}

uint8_t change_pass()
{
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	6a 97       	sbiw	r28, 0x1a	; 26
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
	unsigned char num[]="0123456789*0#";
     666:	8e e0       	ldi	r24, 0x0E	; 14
     668:	e6 e0       	ldi	r30, 0x06	; 6
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	de 01       	movw	r26, r28
     66e:	11 96       	adiw	r26, 0x01	; 1
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <change_pass+0x22>
	unsigned char *number = num;
	unsigned char number_in[6];
	unsigned char *pass_input = number_in;
	i2c_lcd_clear();
     678:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     67c:	80 e8       	ldi	r24, 0x80	; 128
     67e:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR("NEW PASS"));
     682:	8f eb       	ldi	r24, 0xBF	; 191
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	i2c_lcd_begin(0xC0);
     68a:	80 ec       	ldi	r24, 0xC0	; 192
     68c:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	for (uint8_t i =0; i<6; i++)
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	16 c0       	rjmp	.+44     	; 0x6c0 <change_pass+0x72>
	{
		uint8_t	value_button = find_button();
     694:	0e 94 e5 00 	call	0x1ca	; 0x1ca <find_button>
		
		if (value_button == CHANGE_PASSWORD)
     698:	84 31       	cpi	r24, 0x14	; 20
     69a:	09 f4       	brne	.+2      	; 0x69e <change_pass+0x50>
     69c:	7f c0       	rjmp	.+254    	; 0x79c <change_pass+0x14e>
		{
			goto OUT;
		}

		*(pass_input+i)=*(number+value_button);
     69e:	ef e0       	ldi	r30, 0x0F	; 15
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ec 0f       	add	r30, r28
     6a4:	fd 1f       	adc	r31, r29
     6a6:	e1 0f       	add	r30, r17
     6a8:	f1 1d       	adc	r31, r1
     6aa:	a1 e0       	ldi	r26, 0x01	; 1
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	ac 0f       	add	r26, r28
     6b0:	bd 1f       	adc	r27, r29
     6b2:	a8 0f       	add	r26, r24
     6b4:	b1 1d       	adc	r27, r1
     6b6:	8c 91       	ld	r24, X
     6b8:	80 83       	st	Z, r24
		i2c_lcd_data(*(pass_input+i));
     6ba:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>
	unsigned char *pass_input = number_in;
	i2c_lcd_clear();
	i2c_lcd_begin(0x80);
	showString(PSTR("NEW PASS"));
	i2c_lcd_begin(0xC0);
	for (uint8_t i =0; i<6; i++)
     6be:	1f 5f       	subi	r17, 0xFF	; 255
     6c0:	16 30       	cpi	r17, 0x06	; 6
     6c2:	40 f3       	brcs	.-48     	; 0x694 <change_pass+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c4:	2f ef       	ldi	r18, 0xFF	; 255
     6c6:	81 ee       	ldi	r24, 0xE1	; 225
     6c8:	94 e0       	ldi	r25, 0x04	; 4
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	80 40       	sbci	r24, 0x00	; 0
     6ce:	90 40       	sbci	r25, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <change_pass+0x7c>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <change_pass+0x86>
     6d4:	00 00       	nop
		i2c_lcd_data(*(pass_input+i));
	}
	unsigned char number_out[6];
	unsigned char *new_pass = number_out;
	_delay_ms(100);
	i2c_lcd_clear();
     6d6:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     6da:	80 e8       	ldi	r24, 0x80	; 128
     6dc:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR("NEW PASS AGAIN"));
     6e0:	80 eb       	ldi	r24, 0xB0	; 176
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	i2c_lcd_begin(0xC0);
     6e8:	80 ec       	ldi	r24, 0xC0	; 192
     6ea:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	for (uint8_t i =0; i<6; i++)
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	16 c0       	rjmp	.+44     	; 0x71e <change_pass+0xd0>
	{
		uint8_t  value_button = 0;
		value_button = find_button();
     6f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <find_button>
		if (value_button == CHANGE_PASSWORD)
     6f6:	84 31       	cpi	r24, 0x14	; 20
     6f8:	09 f4       	brne	.+2      	; 0x6fc <change_pass+0xae>
     6fa:	52 c0       	rjmp	.+164    	; 0x7a0 <change_pass+0x152>
		{
			goto OUT;
		}
		*(new_pass+i)=*(number+value_button);
     6fc:	e5 e1       	ldi	r30, 0x15	; 21
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ec 0f       	add	r30, r28
     702:	fd 1f       	adc	r31, r29
     704:	e1 0f       	add	r30, r17
     706:	f1 1d       	adc	r31, r1
     708:	a1 e0       	ldi	r26, 0x01	; 1
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	ac 0f       	add	r26, r28
     70e:	bd 1f       	adc	r27, r29
     710:	a8 0f       	add	r26, r24
     712:	b1 1d       	adc	r27, r1
     714:	8c 91       	ld	r24, X
     716:	80 83       	st	Z, r24
		i2c_lcd_data(*(new_pass+i));
     718:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>
	_delay_ms(100);
	i2c_lcd_clear();
	i2c_lcd_begin(0x80);
	showString(PSTR("NEW PASS AGAIN"));
	i2c_lcd_begin(0xC0);
	for (uint8_t i =0; i<6; i++)
     71c:	1f 5f       	subi	r17, 0xFF	; 255
     71e:	16 30       	cpi	r17, 0x06	; 6
     720:	40 f3       	brcs	.-48     	; 0x6f2 <change_pass+0xa4>
			goto OUT;
		}
		*(new_pass+i)=*(number+value_button);
		i2c_lcd_data(*(new_pass+i));
	}
	i2c_lcd_clear();
     722:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	if (compare_string(new_pass,pass_input,6) ==1)
     72c:	46 e0       	ldi	r20, 0x06	; 6
     72e:	be 01       	movw	r22, r28
     730:	61 5f       	subi	r22, 0xF1	; 241
     732:	7f 4f       	sbci	r23, 0xFF	; 255
     734:	ce 01       	movw	r24, r28
     736:	45 96       	adiw	r24, 0x15	; 21
     738:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     73c:	08 2f       	mov	r16, r24
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	f1 f4       	brne	.+60     	; 0x77e <change_pass+0x130>
	{
		showString(PSTR("PASS CHANGED"));
     742:	83 ea       	ldi	r24, 0xA3	; 163
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 02 03 	call	0x604	; 0x604 <showString>
		for (uint8_t i = 0; i<6;i++)
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	0c c0       	rjmp	.+24     	; 0x766 <change_pass+0x118>
		{
			write_eep(i,*(new_pass+i));
     74e:	81 2f       	mov	r24, r17
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	e5 e1       	ldi	r30, 0x15	; 21
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ec 0f       	add	r30, r28
     758:	fd 1f       	adc	r31, r29
     75a:	e8 0f       	add	r30, r24
     75c:	f9 1f       	adc	r31, r25
     75e:	60 81       	ld	r22, Z
     760:	0e 94 ed 02 	call	0x5da	; 0x5da <write_eep>
	i2c_lcd_clear();
	i2c_lcd_begin(0x80);
	if (compare_string(new_pass,pass_input,6) ==1)
	{
		showString(PSTR("PASS CHANGED"));
		for (uint8_t i = 0; i<6;i++)
     764:	1f 5f       	subi	r17, 0xFF	; 255
     766:	16 30       	cpi	r17, 0x06	; 6
     768:	90 f3       	brcs	.-28     	; 0x74e <change_pass+0x100>
     76a:	2f ef       	ldi	r18, 0xFF	; 255
     76c:	87 ea       	ldi	r24, 0xA7	; 167
     76e:	91 e6       	ldi	r25, 0x61	; 97
     770:	21 50       	subi	r18, 0x01	; 1
     772:	80 40       	sbci	r24, 0x00	; 0
     774:	90 40       	sbci	r25, 0x00	; 0
     776:	e1 f7       	brne	.-8      	; 0x770 <change_pass+0x122>
     778:	00 c0       	rjmp	.+0      	; 0x77a <change_pass+0x12c>
     77a:	00 00       	nop
		{
			write_eep(i,*(new_pass+i));
		}
		_delay_ms(2000);
		return 1;
     77c:	12 c0       	rjmp	.+36     	; 0x7a2 <change_pass+0x154>
		}
		else
		{
			showString(PSTR("ERROR"));
     77e:	8d e9       	ldi	r24, 0x9D	; 157
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	87 ea       	ldi	r24, 0xA7	; 167
     78a:	91 e6       	ldi	r25, 0x61	; 97
     78c:	21 50       	subi	r18, 0x01	; 1
     78e:	80 40       	sbci	r24, 0x00	; 0
     790:	90 40       	sbci	r25, 0x00	; 0
     792:	e1 f7       	brne	.-8      	; 0x78c <change_pass+0x13e>
     794:	00 c0       	rjmp	.+0      	; 0x796 <change_pass+0x148>
     796:	00 00       	nop
			_delay_ms(2000);
		}
		
	OUT:
	return 0;
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <change_pass+0x154>
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <change_pass+0x154>
     7a0:	00 e0       	ldi	r16, 0x00	; 0
}
     7a2:	80 2f       	mov	r24, r16
     7a4:	6a 96       	adiw	r28, 0x1a	; 26
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <buzzer>:
	return 1;
}

void buzzer()
{
	PORTC |= (1<<2);
     7ba:	88 b1       	in	r24, 0x08	; 8
     7bc:	84 60       	ori	r24, 0x04	; 4
     7be:	88 b9       	out	0x08, r24	; 8
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	80 e7       	ldi	r24, 0x70	; 112
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <buzzer+0xc>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <buzzer+0x16>
     7d0:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(1<<2);
     7d2:	88 b1       	in	r24, 0x08	; 8
     7d4:	8b 7f       	andi	r24, 0xFB	; 251
     7d6:	88 b9       	out	0x08, r24	; 8
     7d8:	08 95       	ret

000007da <warning>:
}


void warning()
{
	i2c_lcd_clear();
     7da:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR("WARNING"));
     7e4:	88 ec       	ldi	r24, 0xC8	; 200
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	buzzer();
     7ec:	0e 94 dd 03 	call	0x7ba	; 0x7ba <buzzer>
     7f0:	08 95       	ret

000007f2 <insert_card>:
	OUT:
	return 0;
}

void insert_card()
{
     7f2:	9f 92       	push	r9
     7f4:	af 92       	push	r10
     7f6:	bf 92       	push	r11
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
	i2c_lcd_clear();
     808:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     80c:	80 e8       	ldi	r24, 0x80	; 128
     80e:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	uint8_t *new_id = calloc(4, sizeof(uint8_t));
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <calloc>
     81e:	6c 01       	movw	r12, r24
	uint8_t *id_saved = calloc(4, sizeof(uint8_t));
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <calloc>
     82c:	8c 01       	movw	r16, r24
	unsigned char *array = calloc(MAX_LEN,sizeof(unsigned char));
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e1       	ldi	r24, 0x10	; 16
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <calloc>
     83a:	7c 01       	movw	r14, r24
	if (new_id == NULL || id_saved == NULL || array == NULL)
     83c:	c1 14       	cp	r12, r1
     83e:	d1 04       	cpc	r13, r1
     840:	29 f0       	breq	.+10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     842:	01 15       	cp	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	11 f0       	breq	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	89 2b       	or	r24, r25
     84a:	29 f4       	brne	.+10     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
	{
		showString(PSTR("FULL STACK"));
     84c:	82 e9       	ldi	r24, 0x92	; 146
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 02 03 	call	0x604	; 0x604 <showString>
		return;
     854:	9e c0       	rjmp	.+316    	; 0x992 <__stack+0x93>
	}
	showString(PSTR("NEW ID:"));
     856:	8a e8       	ldi	r24, 0x8A	; 138
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	while(mode_rfid ==0)
     85e:	94 c0       	rjmp	.+296    	; 0x988 <__stack+0x89>
	{
		uint8_t	byte = mfrc522_request(PICC_REQALL,array);
     860:	b7 01       	movw	r22, r14
     862:	82 e5       	ldi	r24, 0x52	; 82
     864:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <mfrc522_request>
		byte = mfrc522_get_card_serial(array);
     868:	c7 01       	movw	r24, r14
     86a:	0e 94 1d 0a 	call	0x143a	; 0x143a <mfrc522_get_card_serial>
		if (byte == CARD_FOUND)
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	09 f0       	breq	.+2      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     872:	8a c0       	rjmp	.+276    	; 0x988 <__stack+0x89>
		{	
			buzzer();
     874:	0e 94 dd 03 	call	0x7ba	; 0x7ba <buzzer>
			i2c_lcd_begin(0x88);
     878:	88 e8       	ldi	r24, 0x88	; 136
     87a:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
			for (uint8_t i=0; i<4; i++)
     87e:	91 2c       	mov	r9, r1
     880:	17 c0       	rjmp	.+46     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
			{
				i2c_lcd_data(byte_2_str1(array[i]));
     882:	c9 2d       	mov	r28, r9
     884:	d0 e0       	ldi	r29, 0x00	; 0
     886:	57 01       	movw	r10, r14
     888:	ac 0e       	add	r10, r28
     88a:	bd 1e       	adc	r11, r29
     88c:	f5 01       	movw	r30, r10
     88e:	80 81       	ld	r24, Z
     890:	0e 94 de 02 	call	0x5bc	; 0x5bc <byte_2_str1>
     894:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>
				i2c_lcd_data(byte_2_str2(array[i]));
     898:	f5 01       	movw	r30, r10
     89a:	80 81       	ld	r24, Z
     89c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <byte_2_str2>
     8a0:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>
				*(new_id+i) = array[i];
     8a4:	cc 0d       	add	r28, r12
     8a6:	dd 1d       	adc	r29, r13
     8a8:	f5 01       	movw	r30, r10
     8aa:	80 81       	ld	r24, Z
     8ac:	88 83       	st	Y, r24
		byte = mfrc522_get_card_serial(array);
		if (byte == CARD_FOUND)
		{	
			buzzer();
			i2c_lcd_begin(0x88);
			for (uint8_t i=0; i<4; i++)
     8ae:	93 94       	inc	r9
     8b0:	f3 e0       	ldi	r31, 0x03	; 3
     8b2:	f9 15       	cp	r31, r9
     8b4:	30 f7       	brcc	.-52     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
			{
				i2c_lcd_data(byte_2_str1(array[i]));
				i2c_lcd_data(byte_2_str2(array[i]));
				*(new_id+i) = array[i];
			}
			i2c_lcd_begin(0xC0);
     8b6:	80 ec       	ldi	r24, 0xC0	; 192
     8b8:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
			for (uint8_t k =1; k <= number_id; k++)
     8bc:	aa 24       	eor	r10, r10
     8be:	a3 94       	inc	r10
     8c0:	2d c0       	rjmp	.+90     	; 0x91c <__stack+0x1d>
			{
				for (uint8_t h = 0; h<4; h++)
				{
					*(id_saved+h) = read_eep(2+4*k+h);  
     8c2:	2b 2d       	mov	r18, r11
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	e8 01       	movw	r28, r16
     8c8:	c2 0f       	add	r28, r18
     8ca:	d3 1f       	adc	r29, r19
     8cc:	8a 2d       	mov	r24, r10
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	02 96       	adiw	r24, 0x02	; 2
     8da:	82 0f       	add	r24, r18
     8dc:	93 1f       	adc	r25, r19
     8de:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <read_eep>
     8e2:	88 83       	st	Y, r24
				*(new_id+i) = array[i];
			}
			i2c_lcd_begin(0xC0);
			for (uint8_t k =1; k <= number_id; k++)
			{
				for (uint8_t h = 0; h<4; h++)
     8e4:	b3 94       	inc	r11
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     8e8:	b1 2c       	mov	r11, r1
     8ea:	23 e0       	ldi	r18, 0x03	; 3
     8ec:	2b 15       	cp	r18, r11
     8ee:	48 f7       	brcc	.-46     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
				{
					*(id_saved+h) = read_eep(2+4*k+h);  
				}
				if (compare_string(new_id,id_saved,4)==1)
     8f0:	44 e0       	ldi	r20, 0x04	; 4
     8f2:	b8 01       	movw	r22, r16
     8f4:	c6 01       	movw	r24, r12
     8f6:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	71 f4       	brne	.+28     	; 0x91a <__stack+0x1b>
				{
					showString(PSTR("ID HAS SAVED"));
     8fe:	8d e7       	ldi	r24, 0x7D	; 125
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	97 ea       	ldi	r25, 0xA7	; 167
     90a:	e1 e6       	ldi	r30, 0x61	; 97
     90c:	81 50       	subi	r24, 0x01	; 1
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	e0 40       	sbci	r30, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
     916:	00 00       	nop
     918:	2d c0       	rjmp	.+90     	; 0x974 <__stack+0x75>
				i2c_lcd_data(byte_2_str1(array[i]));
				i2c_lcd_data(byte_2_str2(array[i]));
				*(new_id+i) = array[i];
			}
			i2c_lcd_begin(0xC0);
			for (uint8_t k =1; k <= number_id; k++)
     91a:	a3 94       	inc	r10
     91c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <number_id>
     920:	8a 15       	cp	r24, r10
     922:	10 f7       	brcc	.-60     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
					_delay_ms(2000);
					goto OUT;
					
				}
			}
			number_id +=1;
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <number_id>
			for (uint8_t i=0; i<4;i++)
     92a:	c0 e0       	ldi	r28, 0x00	; 0
     92c:	14 c0       	rjmp	.+40     	; 0x956 <__stack+0x57>
			{
				write_eep(2+4*number_id+i,array[i]);
     92e:	2c 2f       	mov	r18, r28
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f7 01       	movw	r30, r14
     934:	e2 0f       	add	r30, r18
     936:	f3 1f       	adc	r31, r19
     938:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <number_id>
     93c:	89 2f       	mov	r24, r25
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	02 96       	adiw	r24, 0x02	; 2
     94a:	60 81       	ld	r22, Z
     94c:	82 0f       	add	r24, r18
     94e:	93 1f       	adc	r25, r19
     950:	0e 94 ed 02 	call	0x5da	; 0x5da <write_eep>
					goto OUT;
					
				}
			}
			number_id +=1;
			for (uint8_t i=0; i<4;i++)
     954:	cf 5f       	subi	r28, 0xFF	; 255
     956:	c4 30       	cpi	r28, 0x04	; 4
     958:	50 f3       	brcs	.-44     	; 0x92e <__stack+0x2f>
			{
				write_eep(2+4*number_id+i,array[i]);
			}
			showString(PSTR("SUCCESSFULLY"));
     95a:	80 e7       	ldi	r24, 0x70	; 112
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     962:	ff ef       	ldi	r31, 0xFF	; 255
     964:	27 ea       	ldi	r18, 0xA7	; 167
     966:	81 e6       	ldi	r24, 0x61	; 97
     968:	f1 50       	subi	r31, 0x01	; 1
     96a:	20 40       	sbci	r18, 0x00	; 0
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x69>
     970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x73>
     972:	00 00       	nop
			_delay_ms(2000);
			OUT:
			free(array);
     974:	c7 01       	movw	r24, r14
     976:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <free>
			free(new_id);
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <free>
			free(id_saved);
     980:	c8 01       	movw	r24, r16
     982:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <free>
			return;
     986:	05 c0       	rjmp	.+10     	; 0x992 <__stack+0x93>
	{
		showString(PSTR("FULL STACK"));
		return;
	}
	showString(PSTR("NEW ID:"));
	while(mode_rfid ==0)
     988:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode_rfid>
     98c:	88 23       	and	r24, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
     990:	67 cf       	rjmp	.-306    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
			free(id_saved);
			return;
		}
	}
	
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	08 95       	ret

000009aa <lcd_power_on>:
}


void lcd_power_on()
{
	i2c_initialization_master();
     9aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <i2c_initialization_master>
	i2c_start();
     9ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_start>
	i2c_write_master(0x27<<1);
     9b2:	8e e4       	ldi	r24, 0x4E	; 78
     9b4:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_write_master>
	i2c_lcd_init_power();
     9b8:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_lcd_init_power>
	i2c_lcd_init(0x28,0x0F,0x10);
     9bc:	40 e1       	ldi	r20, 0x10	; 16
     9be:	6f e0       	ldi	r22, 0x0F	; 15
     9c0:	88 e2       	ldi	r24, 0x28	; 40
     9c2:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_lcd_init>
     9c6:	08 95       	ret

000009c8 <lcd_power_off>:
}

void lcd_power_off()
{
	i2c_lcd_turnoff();
     9c8:	0e 94 88 02 	call	0x510	; 0x510 <i2c_lcd_turnoff>
	i2c_stop();
     9cc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <i2c_stop>
     9d0:	08 95       	ret

000009d2 <main>:
void close_door();


int main(void)
{
	lcd_power_off();
     9d2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <lcd_power_off>
	i2c_lcd_begin(0x80);
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR("HELLO"));
     9dc:	81 e2       	ldi	r24, 0x21	; 33
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	while (1)
	{
		check_rfid();
	}
	*/
}
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret

000009ea <fast_pwm>:



void fast_pwm(uint16_t speed)
{
	if (speed >2000)
     9ea:	81 3d       	cpi	r24, 0xD1	; 209
     9ec:	27 e0       	ldi	r18, 0x07	; 7
     9ee:	92 07       	cpc	r25, r18
     9f0:	10 f0       	brcs	.+4      	; 0x9f6 <fast_pwm+0xc>
	{
		speed = 2000;
     9f2:	80 ed       	ldi	r24, 0xD0	; 208
     9f4:	97 e0       	ldi	r25, 0x07	; 7
	}
	else if ( speed <0)
	{
		speed =0;
	}
	OCR1A = speed;
     9f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     9fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     9fe:	08 95       	ret

00000a00 <close_door>:
}


void close_door()
{
	PORTB |= (1<<1);
     a00:	85 b1       	in	r24, 0x05	; 5
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<1);
     a06:	88 b1       	in	r24, 0x08	; 8
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<0);
     a0c:	88 b1       	in	r24, 0x08	; 8
     a0e:	8e 7f       	andi	r24, 0xFE	; 254
     a10:	88 b9       	out	0x08, r24	; 8
	external_interrupt(INT0, RAISING);
     a12:	63 e0       	ldi	r22, 0x03	; 3
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 2f 01 	call	0x25e	; 0x25e <external_interrupt>
	error_position = 90;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a4 eb       	ldi	r26, 0xB4	; 180
     a20:	b2 e4       	ldi	r27, 0x42	; 66
     a22:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <error_position>
     a26:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <error_position+0x1>
     a2a:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <error_position+0x2>
     a2e:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <error_position+0x3>
	TIMSK1 &= ~(1<<OCIE1A);
     a32:	ef e6       	ldi	r30, 0x6F	; 111
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8d 7f       	andi	r24, 0xFD	; 253
     a3a:	80 83       	st	Z, r24
	OCR1A = 0;
     a3c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a40:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
     a44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     a48:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = (1<<COM1A1)|(1<<WGM10);
     a4c:	81 e8       	ldi	r24, 0x81	; 129
     a4e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10);
     a52:	8d e0       	ldi	r24, 0x0D	; 13
     a54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	run_millis();
     a58:	0e 94 67 0a 	call	0x14ce	; 0x14ce <run_millis>
	fast_pwm(255);
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fast_pwm>
	while (error_position>0)
     a64:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <error_position>
     a68:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <error_position+0x1>
     a6c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <error_position+0x2>
     a70:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <error_position+0x3>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	a9 01       	movw	r20, r18
     a7a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__gesf2>
     a7e:	18 16       	cp	r1, r24
     a80:	8c f3       	brlt	.-30     	; 0xa64 <close_door+0x64>
	{
	}
	PORTB &= ~(1<<1);
     a82:	85 b1       	in	r24, 0x05	; 5
     a84:	8d 7f       	andi	r24, 0xFD	; 253
     a86:	85 b9       	out	0x05, r24	; 5
	TCCR1B =0;
     a88:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	count = 0;
     a8c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
     a90:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count+0x1>
     a94:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count+0x2>
     a98:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count+0x3>
	error_before = 0;
     a9c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <error_before>
     aa0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <error_before+0x1>
     aa4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <error_before+0x2>
     aa8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <error_before+0x3>
	stop_millis();
     aac:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <stop_millis>
	external_interrupt_stop(INT0);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <external_interrupt_stop>
     ab6:	08 95       	ret

00000ab8 <open_door>:
	
}

void open_door()
{
	i2c_lcd_clear();
     ab8:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x84);
     abc:	84 e8       	ldi	r24, 0x84	; 132
     abe:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR("WELCOME"));
     ac2:	88 e6       	ldi	r24, 0x68	; 104
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	PORTB |= (1<<1);
     aca:	85 b1       	in	r24, 0x05	; 5
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1<<0);
     ad0:	88 b1       	in	r24, 0x08	; 8
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<1);
     ad6:	88 b1       	in	r24, 0x08	; 8
     ad8:	8d 7f       	andi	r24, 0xFD	; 253
     ada:	88 b9       	out	0x08, r24	; 8
	external_interrupt(INT0, RAISING);
     adc:	63 e0       	ldi	r22, 0x03	; 3
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 2f 01 	call	0x25e	; 0x25e <external_interrupt>
	error_position = 90;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a4 eb       	ldi	r26, 0xB4	; 180
     aea:	b2 e4       	ldi	r27, 0x42	; 66
     aec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <error_position>
     af0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <error_position+0x1>
     af4:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <error_position+0x2>
     af8:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <error_position+0x3>
	TIMSK1 &= ~(1<<OCIE1A);
     afc:	ef e6       	ldi	r30, 0x6F	; 111
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	8d 7f       	andi	r24, 0xFD	; 253
     b04:	80 83       	st	Z, r24
	OCR1A = 0;
     b06:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     b0a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
     b0e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b12:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = (1<<COM1A1)|(1<<WGM10);
     b16:	81 e8       	ldi	r24, 0x81	; 129
     b18:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10);
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	run_millis();
     b22:	0e 94 67 0a 	call	0x14ce	; 0x14ce <run_millis>
	fast_pwm(255);
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fast_pwm>
	while (error_position>0)
     b2e:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <error_position>
     b32:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <error_position+0x1>
     b36:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <error_position+0x2>
     b3a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <error_position+0x3>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a9 01       	movw	r20, r18
     b44:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__gesf2>
     b48:	18 16       	cp	r1, r24
     b4a:	8c f3       	brlt	.-30     	; 0xb2e <open_door+0x76>
	{
	}
	PORTB &= ~(1<<1);
     b4c:	85 b1       	in	r24, 0x05	; 5
     b4e:	8d 7f       	andi	r24, 0xFD	; 253
     b50:	85 b9       	out	0x05, r24	; 5
	TCCR1B = 0;
     b52:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	count = 0;
     b56:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
     b5a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count+0x1>
     b5e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count+0x2>
     b62:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count+0x3>
	error_before =0;
     b66:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <error_before>
     b6a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <error_before+0x1>
     b6e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <error_before+0x2>
     b72:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <error_before+0x3>
	stop_millis();
     b76:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <stop_millis>
	external_interrupt_stop(INT0);
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <external_interrupt_stop>
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	83 e2       	ldi	r24, 0x23	; 35
     b84:	94 ef       	ldi	r25, 0xF4	; 244
     b86:	21 50       	subi	r18, 0x01	; 1
     b88:	80 40       	sbci	r24, 0x00	; 0
     b8a:	90 40       	sbci	r25, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <open_door+0xce>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <open_door+0xd8>
     b90:	00 00       	nop
	_delay_ms(5000);
	close_door();
     b92:	0e 94 00 05 	call	0xa00	; 0xa00 <close_door>
     b96:	08 95       	ret

00000b98 <right_password>:
}


void right_password()
{
	open_door();
     b98:	0e 94 5c 05 	call	0xab8	; 0xab8 <open_door>
     b9c:	08 95       	ret

00000b9e <check_rfid>:
	*/
}


void check_rfid()
{
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	68 97       	sbiw	r28, 0x18	; 24
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	buzzer();
     bba:	0e 94 dd 03 	call	0x7ba	; 0x7ba <buzzer>
	DDRD = 0x80;
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x7F;
     bc2:	8f e7       	ldi	r24, 0x7F	; 127
     bc4:	8b b9       	out	0x0b, r24	; 11
	uint8_t array[MAX_LEN];
	while(mode_rfid == 1)
     bc6:	69 c0       	rjmp	.+210    	; 0xc9a <check_rfid+0xfc>
	{
		uint8_t	byte = mfrc522_request(PICC_REQALL,array);
     bc8:	be 01       	movw	r22, r28
     bca:	6f 5f       	subi	r22, 0xFF	; 255
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	82 e5       	ldi	r24, 0x52	; 82
     bd0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <mfrc522_request>
		byte = mfrc522_get_card_serial(array);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 1d 0a 	call	0x143a	; 0x143a <mfrc522_get_card_serial>
		if (byte == CARD_FOUND)
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <check_rfid+0x44>
     be0:	5c c0       	rjmp	.+184    	; 0xc9a <check_rfid+0xfc>
		{
			buzzer();
     be2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <buzzer>
			lcd_power_on();
     be6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcd_power_on>
			uint8_t insert_id[4];
			uint8_t *pt = insert_id;
			for (byte=0;byte<4;byte++)
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <check_rfid+0x72>
			{
				*(pt+byte) = array[byte];
     bee:	82 2f       	mov	r24, r18
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	e5 e1       	ldi	r30, 0x15	; 21
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	ec 0f       	add	r30, r28
     bf8:	fd 1f       	adc	r31, r29
     bfa:	e8 0f       	add	r30, r24
     bfc:	f9 1f       	adc	r31, r25
     bfe:	a1 e0       	ldi	r26, 0x01	; 1
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ac 0f       	add	r26, r28
     c04:	bd 1f       	adc	r27, r29
     c06:	a8 0f       	add	r26, r24
     c08:	b9 1f       	adc	r27, r25
     c0a:	8c 91       	ld	r24, X
     c0c:	80 83       	st	Z, r24
		{
			buzzer();
			lcd_power_on();
			uint8_t insert_id[4];
			uint8_t *pt = insert_id;
			for (byte=0;byte<4;byte++)
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	24 30       	cpi	r18, 0x04	; 4
     c12:	68 f3       	brcs	.-38     	; 0xbee <check_rfid+0x50>
     c14:	01 e0       	ldi	r16, 0x01	; 1
     c16:	2b c0       	rjmp	.+86     	; 0xc6e <check_rfid+0xd0>
			pt = id_saved;
			for (uint8_t i =1;i<=number_id; i++ )
			{
				for (uint8_t j =0; j<4;j++ )
				{
					*(pt +j) = read_eep(2+4*i+j);
     c18:	21 2f       	mov	r18, r17
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	0f 2e       	mov	r0, r31
     c1e:	f1 e1       	ldi	r31, 0x11	; 17
     c20:	ef 2e       	mov	r14, r31
     c22:	f1 2c       	mov	r15, r1
     c24:	f0 2d       	mov	r31, r0
     c26:	ec 0e       	add	r14, r28
     c28:	fd 1e       	adc	r15, r29
     c2a:	e2 0e       	add	r14, r18
     c2c:	f3 1e       	adc	r15, r19
     c2e:	80 2f       	mov	r24, r16
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	02 96       	adiw	r24, 0x02	; 2
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <read_eep>
     c44:	f7 01       	movw	r30, r14
     c46:	80 83       	st	Z, r24
			}
			uint8_t id_saved[4];
			pt = id_saved;
			for (uint8_t i =1;i<=number_id; i++ )
			{
				for (uint8_t j =0; j<4;j++ )
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <check_rfid+0xb0>
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	14 30       	cpi	r17, 0x04	; 4
     c50:	18 f3       	brcs	.-58     	; 0xc18 <check_rfid+0x7a>
				{
					*(pt +j) = read_eep(2+4*i+j);
				}
				if (compare_string(insert_id,id_saved,4)==1)
     c52:	44 e0       	ldi	r20, 0x04	; 4
     c54:	be 01       	movw	r22, r28
     c56:	6f 5e       	subi	r22, 0xEF	; 239
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	ce 01       	movw	r24, r28
     c5c:	45 96       	adiw	r24, 0x15	; 21
     c5e:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	19 f4       	brne	.+6      	; 0xc6c <check_rfid+0xce>
				{
					right_password();
     c66:	0e 94 cc 05 	call	0xb98	; 0xb98 <right_password>
					goto OUT;
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <check_rfid+0xf8>
			{
				*(pt+byte) = array[byte];
			}
			uint8_t id_saved[4];
			pt = id_saved;
			for (uint8_t i =1;i<=number_id; i++ )
     c6c:	0f 5f       	subi	r16, 0xFF	; 255
     c6e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <number_id>
     c72:	80 17       	cp	r24, r16
     c74:	58 f7       	brcc	.-42     	; 0xc4c <check_rfid+0xae>
				{
					right_password();
					goto OUT;
				}
			}
			i2c_lcd_begin(0x80);
     c76:	80 e8       	ldi	r24, 0x80	; 128
     c78:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
			showString(PSTR ("WRONG CARD"));
     c7c:	86 e1       	ldi	r24, 0x16	; 22
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     c84:	ff ef       	ldi	r31, 0xFF	; 255
     c86:	27 ea       	ldi	r18, 0xA7	; 167
     c88:	81 e6       	ldi	r24, 0x61	; 97
     c8a:	f1 50       	subi	r31, 0x01	; 1
     c8c:	20 40       	sbci	r18, 0x00	; 0
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	e1 f7       	brne	.-8      	; 0xc8a <check_rfid+0xec>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <check_rfid+0xf6>
     c94:	00 00       	nop
			_delay_ms(2000);
			OUT:
			lcd_power_off();
     c96:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <lcd_power_off>
{
	buzzer();
	DDRD = 0x80;
	PORTD = 0x7F;
	uint8_t array[MAX_LEN];
	while(mode_rfid == 1)
     c9a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode_rfid>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <check_rfid+0x106>
     ca2:	92 cf       	rjmp	.-220    	; 0xbc8 <check_rfid+0x2a>
			OUT:
			lcd_power_off();
		}

	}
}
     ca4:	68 96       	adiw	r28, 0x18	; 24
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <check_pass>:


void check_pass()
{
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	2e 97       	sbiw	r28, 0x0e	; 14
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0x0F;
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	8a b9       	out	0x0a, r24	; 10
	lcd_power_on();
     ce4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcd_power_on>
	static uint8_t time_wrong =0;
	unsigned char *pass_saved = calloc(6, sizeof(unsigned char));
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <calloc>
     cf4:	6c 01       	movw	r12, r24
	unsigned char *pass_in = calloc(6, sizeof(unsigned char));
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	86 e0       	ldi	r24, 0x06	; 6
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <calloc>
     d02:	7c 01       	movw	r14, r24
	if (pass_saved == NULL || pass_in == NULL)
     d04:	c1 14       	cp	r12, r1
     d06:	d1 04       	cpc	r13, r1
     d08:	11 f0       	breq	.+4      	; 0xd0e <check_pass+0x50>
     d0a:	89 2b       	or	r24, r25
     d0c:	41 f4       	brne	.+16     	; 0xd1e <check_pass+0x60>
	{
		i2c_lcd_begin(0x80);
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
		showString(PSTR("FULL SRAM"));
     d14:	8c e0       	ldi	r24, 0x0C	; 12
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 02 03 	call	0x604	; 0x604 <showString>
		return;
     d1c:	cc c0       	rjmp	.+408    	; 0xeb6 <check_pass+0x1f8>
	}
	unsigned char num[]="0123456789*0#";
     d1e:	8e e0       	ldi	r24, 0x0E	; 14
     d20:	e6 e0       	ldi	r30, 0x06	; 6
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	de 01       	movw	r26, r28
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <check_pass+0x6a>
	unsigned char *number = num;
	INIT:
	for (uint8_t i =0; i<6; i++)
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <check_pass+0x8a>
	{
		*(pass_saved + i) = read_eep(i);
     d34:	81 2f       	mov	r24, r17
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	56 01       	movw	r10, r12
     d3a:	a8 0e       	add	r10, r24
     d3c:	b9 1e       	adc	r11, r25
     d3e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <read_eep>
     d42:	f5 01       	movw	r30, r10
     d44:	80 83       	st	Z, r24
		return;
	}
	unsigned char num[]="0123456789*0#";
	unsigned char *number = num;
	INIT:
	for (uint8_t i =0; i<6; i++)
     d46:	1f 5f       	subi	r17, 0xFF	; 255
     d48:	16 30       	cpi	r17, 0x06	; 6
     d4a:	a0 f3       	brcs	.-24     	; 0xd34 <check_pass+0x76>
	{
		*(pass_saved + i) = read_eep(i);
	}
	PASS:
	i2c_lcd_clear();
     d4c:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
	i2c_lcd_begin(0x80);
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	showString(PSTR ("ENTER PASSWORD"));
     d56:	8d ef       	ldi	r24, 0xFD	; 253
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 02 03 	call	0x604	; 0x604 <showString>
	i2c_lcd_begin(0xC0);
     d5e:	80 ec       	ldi	r24, 0xC0	; 192
     d60:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
	for (unsigned char i=0;i<10;i++)
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	66 c0       	rjmp	.+204    	; 0xe34 <check_pass+0x176>
	{
		unsigned char value_button = find_button();
     d68:	0e 94 e5 00 	call	0x1ca	; 0x1ca <find_button>
		if (value_button == 23)
     d6c:	87 31       	cpi	r24, 0x17	; 23
     d6e:	09 f4       	brne	.+2      	; 0xd72 <check_pass+0xb4>
     d70:	64 c0       	rjmp	.+200    	; 0xe3a <check_pass+0x17c>
		{
			break;
		}
		if (value_button == 22)
     d72:	86 31       	cpi	r24, 0x16	; 22
     d74:	59 f4       	brne	.+22     	; 0xd8c <check_pass+0xce>
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <check_pass+0xc6>
		{
			for (uint8_t i=0;i<6;i++)
			{
				*(pass_in+i) =NULL;
     d78:	f7 01       	movw	r30, r14
     d7a:	e8 0f       	add	r30, r24
     d7c:	f1 1d       	adc	r31, r1
     d7e:	10 82       	st	Z, r1
		{
			break;
		}
		if (value_button == 22)
		{
			for (uint8_t i=0;i<6;i++)
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <check_pass+0xc8>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	86 30       	cpi	r24, 0x06	; 6
     d88:	b8 f3       	brcs	.-18     	; 0xd78 <check_pass+0xba>
     d8a:	e0 cf       	rjmp	.-64     	; 0xd4c <check_pass+0x8e>
			{
				*(pass_in+i) =NULL;
			}
			goto PASS;	
		}
		if (value_button == 21)
     d8c:	85 31       	cpi	r24, 0x15	; 21
     d8e:	f9 f4       	brne	.+62     	; 0xdce <check_pass+0x110>
		{
			if (compare_string(pass_saved,pass_in,6) == 1)
     d90:	46 e0       	ldi	r20, 0x06	; 6
     d92:	b7 01       	movw	r22, r14
     d94:	c6 01       	movw	r24, r12
     d96:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	29 f4       	brne	.+10     	; 0xda8 <check_pass+0xea>
			{
				insert_card();
     d9e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <insert_card>
				i2c_lcd_clear();
     da2:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
				goto PASS;	
     da6:	d2 cf       	rjmp	.-92     	; 0xd4c <check_pass+0x8e>
			}
			else
			{
				i2c_lcd_clear();
     da8:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
				i2c_lcd_begin(0x80);
     dac:	80 e8       	ldi	r24, 0x80	; 128
     dae:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
				showString(PSTR("WRONG PASSWORD"));
     db2:	8e ee       	ldi	r24, 0xEE	; 238
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     dba:	ff ef       	ldi	r31, 0xFF	; 255
     dbc:	2b e7       	ldi	r18, 0x7B	; 123
     dbe:	82 e9       	ldi	r24, 0x92	; 146
     dc0:	f1 50       	subi	r31, 0x01	; 1
     dc2:	20 40       	sbci	r18, 0x00	; 0
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <check_pass+0x102>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <check_pass+0x10c>
     dca:	00 00       	nop
     dcc:	bf cf       	rjmp	.-130    	; 0xd4c <check_pass+0x8e>
				_delay_ms(3000);
			}
			goto PASS;
		}
		if (value_button == 20)
     dce:	84 31       	cpi	r24, 0x14	; 20
     dd0:	01 f5       	brne	.+64     	; 0xe12 <check_pass+0x154>
		{
			if (compare_string(pass_saved,pass_in,6) == 1)
     dd2:	46 e0       	ldi	r20, 0x06	; 6
     dd4:	b7 01       	movw	r22, r14
     dd6:	c6 01       	movw	r24, r12
     dd8:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	31 f4       	brne	.+12     	; 0xdec <check_pass+0x12e>
			{
				uint8_t succes = change_pass();
     de0:	0e 94 27 03 	call	0x64e	; 0x64e <change_pass>
				if (succes ==1)
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	09 f0       	breq	.+2      	; 0xdea <check_pass+0x12c>
     de8:	b1 cf       	rjmp	.-158    	; 0xd4c <check_pass+0x8e>
     dea:	a2 cf       	rjmp	.-188    	; 0xd30 <check_pass+0x72>
					goto INIT;
				}
			}
			else
			{
				i2c_lcd_clear();
     dec:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
				i2c_lcd_begin(0x80);
     df0:	80 e8       	ldi	r24, 0x80	; 128
     df2:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
				showString(PSTR("WRONG PASSWORD"));
     df6:	8f ed       	ldi	r24, 0xDF	; 223
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	e7 ea       	ldi	r30, 0xA7	; 167
     e02:	f1 e6       	ldi	r31, 0x61	; 97
     e04:	91 50       	subi	r25, 0x01	; 1
     e06:	e0 40       	sbci	r30, 0x00	; 0
     e08:	f0 40       	sbci	r31, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <check_pass+0x146>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <check_pass+0x150>
     e0e:	00 00       	nop
     e10:	9d cf       	rjmp	.-198    	; 0xd4c <check_pass+0x8e>
				_delay_ms(2000);
			}
			goto PASS;
		}
		if (value_button ==99)
     e12:	83 36       	cpi	r24, 0x63	; 99
     e14:	09 f4       	brne	.+2      	; 0xe18 <check_pass+0x15a>
     e16:	49 c0       	rjmp	.+146    	; 0xeaa <check_pass+0x1ec>
		{
			goto OUT;
		}
		*(pass_in+i)=*(number + value_button);
     e18:	d7 01       	movw	r26, r14
     e1a:	a1 0f       	add	r26, r17
     e1c:	b1 1d       	adc	r27, r1
     e1e:	e1 e0       	ldi	r30, 0x01	; 1
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	ec 0f       	add	r30, r28
     e24:	fd 1f       	adc	r31, r29
     e26:	e8 0f       	add	r30, r24
     e28:	f1 1d       	adc	r31, r1
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 93       	st	X, r24
		i2c_lcd_data(*(pass_in+i));
     e2e:	0e 94 9b 02 	call	0x536	; 0x536 <i2c_lcd_data>
	PASS:
	i2c_lcd_clear();
	i2c_lcd_begin(0x80);
	showString(PSTR ("ENTER PASSWORD"));
	i2c_lcd_begin(0xC0);
	for (unsigned char i=0;i<10;i++)
     e32:	1f 5f       	subi	r17, 0xFF	; 255
     e34:	1a 30       	cpi	r17, 0x0A	; 10
     e36:	08 f4       	brcc	.+2      	; 0xe3a <check_pass+0x17c>
     e38:	97 cf       	rjmp	.-210    	; 0xd68 <check_pass+0xaa>
			goto OUT;
		}
		*(pass_in+i)=*(number + value_button);
		i2c_lcd_data(*(pass_in+i));
	}
	if (compare_string(pass_saved,pass_in,6)==1)
     e3a:	46 e0       	ldi	r20, 0x06	; 6
     e3c:	b7 01       	movw	r22, r14
     e3e:	c6 01       	movw	r24, r12
     e40:	0e 94 11 03 	call	0x622	; 0x622 <compare_string>
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	29 f4       	brne	.+10     	; 0xe52 <check_pass+0x194>
	{
		right_password();
     e48:	0e 94 cc 05 	call	0xb98	; 0xb98 <right_password>
		time_wrong =0;
     e4c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		goto OUT;
     e50:	2c c0       	rjmp	.+88     	; 0xeaa <check_pass+0x1ec>
	}
	else
	{
		i2c_lcd_clear();
     e52:	0e 94 55 02 	call	0x4aa	; 0x4aa <i2c_lcd_clear>
		i2c_lcd_begin(0x80);
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	0e 94 94 02 	call	0x528	; 0x528 <i2c_lcd_begin>
		showString(PSTR("WRONG PASSWORD"));
     e5c:	80 ed       	ldi	r24, 0xD0	; 208
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 02 03 	call	0x604	; 0x604 <showString>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	83 ec       	ldi	r24, 0xC3	; 195
     e68:	99 e0       	ldi	r25, 0x09	; 9
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <check_pass+0x1ac>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <check_pass+0x1b6>
     e74:	00 00       	nop
		_delay_ms(200);
		time_wrong+=1;
     e76:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		if (time_wrong==3)
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	79 f4       	brne	.+30     	; 0xea2 <check_pass+0x1e4>
		{
			warning();
     e84:	0e 94 ed 03 	call	0x7da	; 0x7da <warning>
			goto OUT;
     e88:	10 c0       	rjmp	.+32     	; 0xeaa <check_pass+0x1ec>
		}
		
		while(mode_rfid == 0)
		{
			if ((PIND&(1<<3))==0)
     e8a:	4b 99       	sbic	0x09, 3	; 9
     e8c:	0a c0       	rjmp	.+20     	; 0xea2 <check_pass+0x1e4>
     e8e:	ef ef       	ldi	r30, 0xFF	; 255
     e90:	f1 ee       	ldi	r31, 0xE1	; 225
     e92:	24 e0       	ldi	r18, 0x04	; 4
     e94:	e1 50       	subi	r30, 0x01	; 1
     e96:	f0 40       	sbci	r31, 0x00	; 0
     e98:	20 40       	sbci	r18, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <check_pass+0x1d6>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <check_pass+0x1e0>
     e9e:	00 00       	nop
     ea0:	55 cf       	rjmp	.-342    	; 0xd4c <check_pass+0x8e>
		{
			warning();
			goto OUT;
		}
		
		while(mode_rfid == 0)
     ea2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <mode_rfid>
     ea6:	88 23       	and	r24, r24
     ea8:	81 f3       	breq	.-32     	; 0xe8a <check_pass+0x1cc>
				goto PASS;
			}
		}
	} 
	OUT:
	free(pass_saved);
     eaa:	c6 01       	movw	r24, r12
     eac:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <free>
	free(pass_in);
     eb0:	c7 01       	movw	r24, r14
     eb2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <free>
	return;
}
     eb6:	2e 96       	adiw	r28, 0x0e	; 14
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	08 95       	ret

00000ed6 <__vector_1>:




ISR(INT0_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	count +=1;
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <count>
     f04:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <count+0x1>
     f08:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count+0x2>
     f0c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <count+0x3>
     f10:	0e 94 86 0a 	call	0x150c	; 0x150c <__addsf3>
     f14:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <count>
     f18:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <count+0x1>
     f1c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <count+0x2>
     f20:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <count+0x3>
}
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	8f 92       	push	r8
     f52:	9f 92       	push	r9
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
	milisecond +=1;
     f78:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <milisecond>
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <milisecond>
	if (milisecond  >=20 )
     f82:	84 31       	cpi	r24, 0x14	; 20
     f84:	08 f4       	brcc	.+2      	; 0xf88 <__vector_14+0x42>
     f86:	5b c0       	rjmp	.+182    	; 0x103e <__vector_14+0xf8>
	{
		error_position = 90 - (count/750)*360;
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e8       	ldi	r19, 0x80	; 128
     f8c:	4b e3       	ldi	r20, 0x3B	; 59
     f8e:	54 e4       	ldi	r21, 0x44	; 68
     f90:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <count>
     f94:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <count+0x1>
     f98:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <count+0x2>
     f9c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <count+0x3>
     fa0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__divsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	44 eb       	ldi	r20, 0xB4	; 180
     faa:	53 e4       	ldi	r21, 0x43	; 67
     fac:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__mulsf3>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	84 eb       	ldi	r24, 0xB4	; 180
     fba:	92 e4       	ldi	r25, 0x42	; 66
     fbc:	0e 94 85 0a 	call	0x150a	; 0x150a <__subsf3>
     fc0:	6b 01       	movw	r12, r22
     fc2:	7c 01       	movw	r14, r24
     fc4:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <error_position>
     fc8:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <error_position+0x1>
     fcc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <error_position+0x2>
     fd0:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <error_position+0x3>
		uint16_t speed = (uint16_t) 10*error_position + ((error_position - error_before)/0.02)*0.01;
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e2       	ldi	r20, 0x20	; 32
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__mulsf3>
     fe0:	4b 01       	movw	r8, r22
     fe2:	5c 01       	movw	r10, r24
     fe4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <error_before>
     fe8:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <error_before+0x1>
     fec:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <error_before+0x2>
     ff0:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <error_before+0x3>
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	0e 94 85 0a 	call	0x150a	; 0x150a <__subsf3>
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	37 ed       	ldi	r19, 0xD7	; 215
    1000:	43 ea       	ldi	r20, 0xA3	; 163
    1002:	5c e3       	ldi	r21, 0x3C	; 60
    1004:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__divsf3>
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	37 ed       	ldi	r19, 0xD7	; 215
    100c:	43 e2       	ldi	r20, 0x23	; 35
    100e:	5c e3       	ldi	r21, 0x3C	; 60
    1010:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__mulsf3>
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 86 0a 	call	0x150c	; 0x150c <__addsf3>
    1020:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fixunssfsi>
		error_before = error_position;
    1024:	c0 92 19 01 	sts	0x0119, r12	; 0x800119 <error_before>
    1028:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <error_before+0x1>
    102c:	e0 92 1b 01 	sts	0x011B, r14	; 0x80011b <error_before+0x2>
    1030:	f0 92 1c 01 	sts	0x011C, r15	; 0x80011c <error_before+0x3>
		fast_pwm(speed);
    1034:	cb 01       	movw	r24, r22
    1036:	0e 94 f5 04 	call	0x9ea	; 0x9ea <fast_pwm>
		milisecond =0;
    103a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <milisecond>
	}
}
    103e:	ff 91       	pop	r31
    1040:	ef 91       	pop	r30
    1042:	bf 91       	pop	r27
    1044:	af 91       	pop	r26
    1046:	9f 91       	pop	r25
    1048:	8f 91       	pop	r24
    104a:	7f 91       	pop	r23
    104c:	6f 91       	pop	r22
    104e:	5f 91       	pop	r21
    1050:	4f 91       	pop	r20
    1052:	3f 91       	pop	r19
    1054:	2f 91       	pop	r18
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <run_seconds>:
}


void run_seconds()
{
	seconds =0;
    1070:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <seconds>
	TIMSK1 |= (1<<OCIE1A);
    1074:	ef e6       	ldi	r30, 0x6F	; 111
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 83       	st	Z, r24
	sei();
    107e:	78 94       	sei
	OCR1A = 31249;
    1080:	81 e1       	ldi	r24, 0x11	; 17
    1082:	9a e7       	ldi	r25, 0x7A	; 122
    1084:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1088:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0X00;
    108c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS02);
    1090:	8c e0       	ldi	r24, 0x0C	; 12
    1092:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;
    1096:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    109a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    109e:	08 95       	ret

000010a0 <__vector_5>:




ISR(PCINT2_vect)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
	pinchange_interrupt_stop(PORT_D,3);
    10c2:	63 e0       	ldi	r22, 0x03	; 3
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	0e 94 a9 01 	call	0x352	; 0x352 <pinchange_interrupt_stop>
	mode_rfid = 0;
    10ca:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <mode_rfid>
	run_seconds();
    10ce:	0e 94 38 08 	call	0x1070	; 0x1070 <run_seconds>
    10d2:	2f ef       	ldi	r18, 0xFF	; 255
    10d4:	81 ee       	ldi	r24, 0xE1	; 225
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	21 50       	subi	r18, 0x01	; 1
    10da:	80 40       	sbci	r24, 0x00	; 0
    10dc:	90 40       	sbci	r25, 0x00	; 0
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <__vector_5+0x38>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <__vector_5+0x42>
    10e2:	00 00       	nop
	_delay_ms(100);
	check_pass();
    10e4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <check_pass>
	mode_rfid = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <mode_rfid>
	key_flag = 1;
    10ee:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <key_flag>
	seconds =0;
    10f2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <seconds>
	lcd_power_off();
    10f6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <lcd_power_off>
	PORTD = 0x7F;
    10fa:	8f e7       	ldi	r24, 0x7F	; 127
    10fc:	8b b9       	out	0x0b, r24	; 11
	pinchange_interrupt(PORT_D,3);
    10fe:	63 e0       	ldi	r22, 0x03	; 3
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	0e 94 6e 01 	call	0x2dc	; 0x2dc <pinchange_interrupt>
	check_rfid();
    1106:	0e 94 cf 05 	call	0xb9e	; 0xb9e <check_rfid>
}
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_11>:
	TCCR1B = (1<<WGM12)|(1<<CS02);
	TCNT1 = 0;
}

ISR(TIMER1_COMPA_vect)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	8f 93       	push	r24
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
	seconds+=1;
    113c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <seconds>
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <seconds>
	TCNT1 = 0;
    1146:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    114a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	if (seconds >= 30)
    114e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <seconds>
    1152:	8e 31       	cpi	r24, 0x1E	; 30
    1154:	60 f0       	brcs	.+24     	; 0x116e <__vector_11+0x42>
	{
		mode_rfid =1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <mode_rfid>
		key_flag = 1;
    115c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <key_flag>
		TIMSK1 &= ~(1<<OCIE1A);
    1160:	ef e6       	ldi	r30, 0x6F	; 111
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8d 7f       	andi	r24, 0xFD	; 253
    1168:	80 83       	st	Z, r24
		TCCR1B = 0;
    116a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	8f 91       	pop	r24
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <mfrc522_write>:
	mfrc522_write(ModeReg, 0x3D);
	
	byte = mfrc522_read(TxControlReg);
	if(!(byte&0x03))
	{
		mfrc522_write(TxControlReg,byte|0x03);
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	c8 2f       	mov	r28, r24
    1184:	d6 2f       	mov	r29, r22
    1186:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <enable_spi>
    118a:	8c 2f       	mov	r24, r28
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	8e 77       	andi	r24, 0x7E	; 126
    1194:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <spi_transmit>
    1198:	8d 2f       	mov	r24, r29
    119a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <spi_transmit>
    119e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <disable_spi>
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <mfrc522_read>:
    11a8:	cf 93       	push	r28
    11aa:	c8 2f       	mov	r28, r24
    11ac:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <enable_spi>
    11b0:	8c 2f       	mov	r24, r28
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	8e 77       	andi	r24, 0x7E	; 126
    11ba:	80 68       	ori	r24, 0x80	; 128
    11bc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <spi_transmit>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <spi_transmit>
    11c6:	c8 2f       	mov	r28, r24
    11c8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <disable_spi>
    11cc:	8c 2f       	mov	r24, r28
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	d8 2f       	mov	r29, r24
    11f4:	7b 01       	movw	r14, r22
    11f6:	c4 2f       	mov	r28, r20
    11f8:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
    11fa:	8c 30       	cpi	r24, 0x0C	; 12
    11fc:	29 f0       	breq	.+10     	; 0x1208 <mfrc522_to_card+0x36>
    11fe:	8e 30       	cpi	r24, 0x0E	; 14
    1200:	61 f0       	breq	.+24     	; 0x121a <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
    1202:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    1204:	81 2c       	mov	r8, r1
    1206:	10 c0       	rjmp	.+32     	; 0x1228 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    1208:	0f 2e       	mov	r0, r31
    120a:	f0 e3       	ldi	r31, 0x30	; 48
    120c:	9f 2e       	mov	r9, r31
    120e:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
    1210:	0f 2e       	mov	r0, r31
    1212:	f7 e7       	ldi	r31, 0x77	; 119
    1214:	8f 2e       	mov	r8, r31
    1216:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    121a:	68 94       	set
    121c:	99 24       	eor	r9, r9
    121e:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
    1220:	0f 2e       	mov	r0, r31
    1222:	f2 e1       	ldi	r31, 0x12	; 18
    1224:	8f 2e       	mov	r8, r31
    1226:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    122e:	68 2f       	mov	r22, r24
    1230:	6f 77       	andi	r22, 0x7F	; 127
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
    1238:	8a e0       	ldi	r24, 0x0A	; 10
    123a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    123e:	68 2f       	mov	r22, r24
    1240:	60 68       	ori	r22, 0x80	; 128
    1242:	8a e0       	ldi	r24, 0x0A	; 10
    1244:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    1250:	41 2c       	mov	r4, r1
    1252:	51 2c       	mov	r5, r1
    1254:	32 01       	movw	r6, r4
    1256:	0c c0       	rjmp	.+24     	; 0x1270 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
    1258:	f7 01       	movw	r30, r14
    125a:	e4 0d       	add	r30, r4
    125c:	f5 1d       	adc	r31, r5
    125e:	60 81       	ld	r22, Z
    1260:	89 e0       	ldi	r24, 0x09	; 9
    1262:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	48 1a       	sub	r4, r24
    126a:	58 0a       	sbc	r5, r24
    126c:	68 0a       	sbc	r6, r24
    126e:	78 0a       	sbc	r7, r24
    1270:	8c 2f       	mov	r24, r28
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	48 16       	cp	r4, r24
    127a:	59 06       	cpc	r5, r25
    127c:	6a 06       	cpc	r6, r26
    127e:	7b 06       	cpc	r7, r27
    1280:	58 f3       	brcs	.-42     	; 0x1258 <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    1282:	6d 2f       	mov	r22, r29
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
    if (cmd == Transceive_CMD)
    128a:	dc 30       	cpi	r29, 0x0C	; 12
    128c:	41 f4       	brne	.+16     	; 0x129e <mfrc522_to_card+0xcc>
    {    
		n=mfrc522_read(BitFramingReg);
    128e:	8d e0       	ldi	r24, 0x0D	; 13
    1290:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
    1294:	68 2f       	mov	r22, r24
    1296:	60 68       	ori	r22, 0x80	; 128
    1298:	8d e0       	ldi	r24, 0x0D	; 13
    129a:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    129e:	0f 2e       	mov	r0, r31
    12a0:	f0 ed       	ldi	r31, 0xD0	; 208
    12a2:	cf 2e       	mov	r12, r31
    12a4:	f7 e0       	ldi	r31, 0x07	; 7
    12a6:	df 2e       	mov	r13, r31
    12a8:	e1 2c       	mov	r14, r1
    12aa:	f1 2c       	mov	r15, r1
    12ac:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    12b4:	c8 2f       	mov	r28, r24
        i--;
    12b6:	e1 e0       	ldi	r30, 0x01	; 1
    12b8:	ce 1a       	sub	r12, r30
    12ba:	d1 08       	sbc	r13, r1
    12bc:	e1 08       	sbc	r14, r1
    12be:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    12c0:	29 f0       	breq	.+10     	; 0x12cc <mfrc522_to_card+0xfa>
    12c2:	80 fd       	sbrc	r24, 0
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <mfrc522_to_card+0xfa>
    12c6:	89 2d       	mov	r24, r9
    12c8:	8c 23       	and	r24, r28
    12ca:	89 f3       	breq	.-30     	; 0x12ae <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
    12cc:	8d e0       	ldi	r24, 0x0D	; 13
    12ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
    12d2:	68 2f       	mov	r22, r24
    12d4:	6f 77       	andi	r22, 0x7F	; 127
    12d6:	8d e0       	ldi	r24, 0x0D	; 13
    12d8:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
	
    if (i != 0)
    12dc:	cd 28       	or	r12, r13
    12de:	ce 28       	or	r12, r14
    12e0:	cf 28       	or	r12, r15
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <mfrc522_to_card+0x114>
    12e4:	60 c0       	rjmp	.+192    	; 0x13a6 <mfrc522_to_card+0x1d4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    12e6:	86 e0       	ldi	r24, 0x06	; 6
    12e8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    12ec:	8b 71       	andi	r24, 0x1B	; 27
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <mfrc522_to_card+0x120>
    12f0:	5c c0       	rjmp	.+184    	; 0x13aa <mfrc522_to_card+0x1d8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
    12f2:	c8 21       	and	r28, r8
    12f4:	c0 fd       	sbrc	r28, 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <mfrc522_to_card+0x12a>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
    12f8:	c1 e0       	ldi	r28, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <mfrc522_to_card+0x12c>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
    12fc:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
    12fe:	dc 30       	cpi	r29, 0x0C	; 12
    1300:	09 f0       	breq	.+2      	; 0x1304 <mfrc522_to_card+0x132>
    1302:	54 c0       	rjmp	.+168    	; 0x13ac <mfrc522_to_card+0x1da>
            {
               	n = mfrc522_read(FIFOLevelReg);
    1304:	8a e0       	ldi	r24, 0x0A	; 10
    1306:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    130a:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
    130c:	8c e0       	ldi	r24, 0x0C	; 12
    130e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    1312:	28 2f       	mov	r18, r24
    1314:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
    1316:	a9 f0       	breq	.+42     	; 0x1342 <mfrc522_to_card+0x170>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
    1318:	8d 2f       	mov	r24, r29
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	82 0f       	add	r24, r18
    132c:	91 1d       	adc	r25, r1
    132e:	09 2e       	mov	r0, r25
    1330:	00 0c       	add	r0, r0
    1332:	aa 0b       	sbc	r26, r26
    1334:	bb 0b       	sbc	r27, r27
    1336:	f8 01       	movw	r30, r16
    1338:	80 83       	st	Z, r24
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	a2 83       	std	Z+2, r26	; 0x02
    133e:	b3 83       	std	Z+3, r27	; 0x03
    1340:	11 c0       	rjmp	.+34     	; 0x1364 <mfrc522_to_card+0x192>
				}
                else
                {   
					*back_data_len = n*8;   
    1342:	8d 2f       	mov	r24, r29
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	09 2e       	mov	r0, r25
    1354:	00 0c       	add	r0, r0
    1356:	aa 0b       	sbc	r26, r26
    1358:	bb 0b       	sbc	r27, r27
    135a:	f8 01       	movw	r30, r16
    135c:	80 83       	st	Z, r24
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	a2 83       	std	Z+2, r26	; 0x02
    1362:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
    1364:	d1 11       	cpse	r29, r1
    1366:	01 c0       	rjmp	.+2      	; 0x136a <mfrc522_to_card+0x198>
                {   
					n = 1;    
    1368:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
    136a:	d1 31       	cpi	r29, 0x11	; 17
    136c:	08 f0       	brcs	.+2      	; 0x1370 <mfrc522_to_card+0x19e>
                {   
					n = MAX_LEN;   
    136e:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    1370:	c1 2c       	mov	r12, r1
    1372:	d1 2c       	mov	r13, r1
    1374:	76 01       	movw	r14, r12
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <mfrc522_to_card+0x1c0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
    1378:	85 01       	movw	r16, r10
    137a:	0c 0d       	add	r16, r12
    137c:	1d 1d       	adc	r17, r13
    137e:	89 e0       	ldi	r24, 0x09	; 9
    1380:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mfrc522_read>
    1384:	f8 01       	movw	r30, r16
    1386:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    1388:	ff ef       	ldi	r31, 0xFF	; 255
    138a:	cf 1a       	sub	r12, r31
    138c:	df 0a       	sbc	r13, r31
    138e:	ef 0a       	sbc	r14, r31
    1390:	ff 0a       	sbc	r15, r31
    1392:	8d 2f       	mov	r24, r29
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	c8 16       	cp	r12, r24
    139c:	d9 06       	cpc	r13, r25
    139e:	ea 06       	cpc	r14, r26
    13a0:	fb 06       	cpc	r15, r27
    13a2:	50 f3       	brcs	.-44     	; 0x1378 <mfrc522_to_card+0x1a6>
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <mfrc522_to_card+0x1da>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    13a6:	c3 e0       	ldi	r28, 0x03	; 3
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <mfrc522_to_card+0x1da>
				}
            }
        }
        else
        {   
			status = ERROR;  
    13aa:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
    13ac:	8c 2f       	mov	r24, r28
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	5f 90       	pop	r5
    13cc:	4f 90       	pop	r4
    13ce:	08 95       	ret

000013d0 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 d0       	rcall	.+0      	; 0x13de <mfrc522_request+0xe>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <mfrc522_request+0x10>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	18 2f       	mov	r17, r24
    13e6:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
    13e8:	67 e0       	ldi	r22, 0x07	; 7
    13ea:	8d e0       	ldi	r24, 0x0D	; 13
    13ec:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
	
	tag_type[0] = req_mode;
    13f0:	f7 01       	movw	r30, r14
    13f2:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
    13f4:	8e 01       	movw	r16, r28
    13f6:	0f 5f       	subi	r16, 0xFF	; 255
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	97 01       	movw	r18, r14
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	b7 01       	movw	r22, r14
    1400:	8c e0       	ldi	r24, 0x0C	; 12
    1402:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	51 f4       	brne	.+20     	; 0x141e <mfrc522_request+0x4e>
    140a:	49 81       	ldd	r20, Y+1	; 0x01
    140c:	5a 81       	ldd	r21, Y+2	; 0x02
    140e:	6b 81       	ldd	r22, Y+3	; 0x03
    1410:	7c 81       	ldd	r23, Y+4	; 0x04
    1412:	40 31       	cpi	r20, 0x10	; 16
    1414:	51 05       	cpc	r21, r1
    1416:	61 05       	cpc	r22, r1
    1418:	71 05       	cpc	r23, r1
    141a:	19 f4       	brne	.+6      	; 0x1422 <mfrc522_request+0x52>
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <mfrc522_request+0x54>
	{    
		status = ERROR;
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <mfrc522_request+0x54>
    1422:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	08 95       	ret

0000143a <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 d0       	rcall	.+0      	; 0x1448 <mfrc522_get_card_serial+0xe>
    1448:	00 d0       	rcall	.+0      	; 0x144a <mfrc522_get_card_serial+0x10>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	8d e0       	ldi	r24, 0x0D	; 13
    1454:	0e 94 bf 08 	call	0x117e	; 0x117e <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
    1458:	83 e9       	ldi	r24, 0x93	; 147
    145a:	f7 01       	movw	r30, r14
    145c:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
    1462:	8e 01       	movw	r16, r28
    1464:	0f 5f       	subi	r16, 0xFF	; 255
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	97 01       	movw	r18, r14
    146a:	42 e0       	ldi	r20, 0x02	; 2
    146c:	b7 01       	movw	r22, r14
    146e:	8c e0       	ldi	r24, 0x0C	; 12
    1470:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <mfrc522_to_card>

    if (status == CARD_FOUND)
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 f4       	brne	.+36     	; 0x149c <mfrc522_get_card_serial+0x62>
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
    147a:	f7 01       	movw	r30, r14
    147c:	e9 0f       	add	r30, r25
    147e:	f1 1d       	adc	r31, r1
    1480:	30 81       	ld	r19, Z
    1482:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    1484:	9f 5f       	subi	r25, 0xFF	; 255
    1486:	02 c0       	rjmp	.+4      	; 0x148c <mfrc522_get_card_serial+0x52>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	94 30       	cpi	r25, 0x04	; 4
    148e:	a8 f3       	brcs	.-22     	; 0x147a <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    1490:	f7 01       	movw	r30, r14
    1492:	e9 0f       	add	r30, r25
    1494:	f1 1d       	adc	r31, r1
    1496:	90 81       	ld	r25, Z
    1498:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
    149a:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	08 95       	ret

000014b2 <enable_spi>:
	SPCR &= 0;
}

void enable_spi()
{
	PORTB &= ~(1<<SS);
    14b2:	85 b1       	in	r24, 0x05	; 5
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	85 b9       	out	0x05, r24	; 5
    14b8:	08 95       	ret

000014ba <disable_spi>:
}


void disable_spi()
{
	PORTB |= (1<<SS);
    14ba:	85 b1       	in	r24, 0x05	; 5
    14bc:	84 60       	ori	r24, 0x04	; 4
    14be:	85 b9       	out	0x05, r24	; 5
    14c0:	08 95       	ret

000014c2 <spi_transmit>:
}

uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
    14c2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)));
    14c4:	0d b4       	in	r0, 0x2d	; 45
    14c6:	07 fe       	sbrs	r0, 7
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <spi_transmit+0x2>
	return SPDR;
    14ca:	8e b5       	in	r24, 0x2e	; 46
	
    14cc:	08 95       	ret

000014ce <run_millis>:
#include <avr/io.h>
#include <avr/interrupt.h>

void run_millis()
{
	milisecond = 0;
    14ce:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <milisecond>
	TIMSK0 |= (1<<OCIE0A);
    14d2:	ee e6       	ldi	r30, 0x6E	; 110
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	82 60       	ori	r24, 0x02	; 2
    14da:	80 83       	st	Z, r24
	sei();
    14dc:	78 94       	sei
	TCNT0 =0;
    14de:	16 bc       	out	0x26, r1	; 38
	OCR0A = 124;
    14e0:	8c e7       	ldi	r24, 0x7C	; 124
    14e2:	87 bd       	out	0x27, r24	; 39
	TCCR0A &= ~((1<<WGM01)|(1<<WGM00));
    14e4:	84 b5       	in	r24, 0x24	; 36
    14e6:	8c 7f       	andi	r24, 0xFC	; 252
    14e8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
    14ea:	84 b5       	in	r24, 0x24	; 36
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
    14f0:	85 b5       	in	r24, 0x25	; 37
    14f2:	88 7f       	andi	r24, 0xF8	; 248
    14f4:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01)|(1<<CS00);
    14f6:	85 b5       	in	r24, 0x25	; 37
    14f8:	83 60       	ori	r24, 0x03	; 3
    14fa:	85 bd       	out	0x25, r24	; 37
    14fc:	08 95       	ret

000014fe <stop_millis>:
}

void stop_millis()
{
	TIMSK0 &= ~(1<<OCIE0A);
    14fe:	ee e6       	ldi	r30, 0x6E	; 110
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	80 83       	st	Z, r24
    1508:	08 95       	ret

0000150a <__subsf3>:
    150a:	50 58       	subi	r21, 0x80	; 128

0000150c <__addsf3>:
    150c:	bb 27       	eor	r27, r27
    150e:	aa 27       	eor	r26, r26
    1510:	0e 94 9d 0a 	call	0x153a	; 0x153a <__addsf3x>
    1514:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_round>
    1518:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__fp_pscA>
    151c:	38 f0       	brcs	.+14     	; 0x152c <__addsf3+0x20>
    151e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_pscB>
    1522:	20 f0       	brcs	.+8      	; 0x152c <__addsf3+0x20>
    1524:	39 f4       	brne	.+14     	; 0x1534 <__addsf3+0x28>
    1526:	9f 3f       	cpi	r25, 0xFF	; 255
    1528:	19 f4       	brne	.+6      	; 0x1530 <__addsf3+0x24>
    152a:	26 f4       	brtc	.+8      	; 0x1534 <__addsf3+0x28>
    152c:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_nan>
    1530:	0e f4       	brtc	.+2      	; 0x1534 <__addsf3+0x28>
    1532:	e0 95       	com	r30
    1534:	e7 fb       	bst	r30, 7
    1536:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_inf>

0000153a <__addsf3x>:
    153a:	e9 2f       	mov	r30, r25
    153c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_split3>
    1540:	58 f3       	brcs	.-42     	; 0x1518 <__addsf3+0xc>
    1542:	ba 17       	cp	r27, r26
    1544:	62 07       	cpc	r22, r18
    1546:	73 07       	cpc	r23, r19
    1548:	84 07       	cpc	r24, r20
    154a:	95 07       	cpc	r25, r21
    154c:	20 f0       	brcs	.+8      	; 0x1556 <__addsf3x+0x1c>
    154e:	79 f4       	brne	.+30     	; 0x156e <__addsf3x+0x34>
    1550:	a6 f5       	brtc	.+104    	; 0x15ba <__addsf3x+0x80>
    1552:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_zero>
    1556:	0e f4       	brtc	.+2      	; 0x155a <__addsf3x+0x20>
    1558:	e0 95       	com	r30
    155a:	0b 2e       	mov	r0, r27
    155c:	ba 2f       	mov	r27, r26
    155e:	a0 2d       	mov	r26, r0
    1560:	0b 01       	movw	r0, r22
    1562:	b9 01       	movw	r22, r18
    1564:	90 01       	movw	r18, r0
    1566:	0c 01       	movw	r0, r24
    1568:	ca 01       	movw	r24, r20
    156a:	a0 01       	movw	r20, r0
    156c:	11 24       	eor	r1, r1
    156e:	ff 27       	eor	r31, r31
    1570:	59 1b       	sub	r21, r25
    1572:	99 f0       	breq	.+38     	; 0x159a <__addsf3x+0x60>
    1574:	59 3f       	cpi	r21, 0xF9	; 249
    1576:	50 f4       	brcc	.+20     	; 0x158c <__addsf3x+0x52>
    1578:	50 3e       	cpi	r21, 0xE0	; 224
    157a:	68 f1       	brcs	.+90     	; 0x15d6 <__addsf3x+0x9c>
    157c:	1a 16       	cp	r1, r26
    157e:	f0 40       	sbci	r31, 0x00	; 0
    1580:	a2 2f       	mov	r26, r18
    1582:	23 2f       	mov	r18, r19
    1584:	34 2f       	mov	r19, r20
    1586:	44 27       	eor	r20, r20
    1588:	58 5f       	subi	r21, 0xF8	; 248
    158a:	f3 cf       	rjmp	.-26     	; 0x1572 <__addsf3x+0x38>
    158c:	46 95       	lsr	r20
    158e:	37 95       	ror	r19
    1590:	27 95       	ror	r18
    1592:	a7 95       	ror	r26
    1594:	f0 40       	sbci	r31, 0x00	; 0
    1596:	53 95       	inc	r21
    1598:	c9 f7       	brne	.-14     	; 0x158c <__addsf3x+0x52>
    159a:	7e f4       	brtc	.+30     	; 0x15ba <__addsf3x+0x80>
    159c:	1f 16       	cp	r1, r31
    159e:	ba 0b       	sbc	r27, r26
    15a0:	62 0b       	sbc	r22, r18
    15a2:	73 0b       	sbc	r23, r19
    15a4:	84 0b       	sbc	r24, r20
    15a6:	ba f0       	brmi	.+46     	; 0x15d6 <__addsf3x+0x9c>
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	a1 f0       	breq	.+40     	; 0x15d4 <__addsf3x+0x9a>
    15ac:	ff 0f       	add	r31, r31
    15ae:	bb 1f       	adc	r27, r27
    15b0:	66 1f       	adc	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	c2 f7       	brpl	.-16     	; 0x15a8 <__addsf3x+0x6e>
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__addsf3x+0x9c>
    15ba:	ba 0f       	add	r27, r26
    15bc:	62 1f       	adc	r22, r18
    15be:	73 1f       	adc	r23, r19
    15c0:	84 1f       	adc	r24, r20
    15c2:	48 f4       	brcc	.+18     	; 0x15d6 <__addsf3x+0x9c>
    15c4:	87 95       	ror	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	b7 95       	ror	r27
    15cc:	f7 95       	ror	r31
    15ce:	9e 3f       	cpi	r25, 0xFE	; 254
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <__addsf3x+0x9a>
    15d2:	b0 cf       	rjmp	.-160    	; 0x1534 <__addsf3+0x28>
    15d4:	93 95       	inc	r25
    15d6:	88 0f       	add	r24, r24
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <__addsf3x+0xa2>
    15da:	99 27       	eor	r25, r25
    15dc:	ee 0f       	add	r30, r30
    15de:	97 95       	ror	r25
    15e0:	87 95       	ror	r24
    15e2:	08 95       	ret

000015e4 <__divsf3>:
    15e4:	0e 94 06 0b 	call	0x160c	; 0x160c <__divsf3x>
    15e8:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_round>
    15ec:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_pscB>
    15f0:	58 f0       	brcs	.+22     	; 0x1608 <__divsf3+0x24>
    15f2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__fp_pscA>
    15f6:	40 f0       	brcs	.+16     	; 0x1608 <__divsf3+0x24>
    15f8:	29 f4       	brne	.+10     	; 0x1604 <__divsf3+0x20>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	29 f0       	breq	.+10     	; 0x1608 <__divsf3+0x24>
    15fe:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_inf>
    1602:	51 11       	cpse	r21, r1
    1604:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_szero>
    1608:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_nan>

0000160c <__divsf3x>:
    160c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_split3>
    1610:	68 f3       	brcs	.-38     	; 0x15ec <__divsf3+0x8>

00001612 <__divsf3_pse>:
    1612:	99 23       	and	r25, r25
    1614:	b1 f3       	breq	.-20     	; 0x1602 <__divsf3+0x1e>
    1616:	55 23       	and	r21, r21
    1618:	91 f3       	breq	.-28     	; 0x15fe <__divsf3+0x1a>
    161a:	95 1b       	sub	r25, r21
    161c:	55 0b       	sbc	r21, r21
    161e:	bb 27       	eor	r27, r27
    1620:	aa 27       	eor	r26, r26
    1622:	62 17       	cp	r22, r18
    1624:	73 07       	cpc	r23, r19
    1626:	84 07       	cpc	r24, r20
    1628:	38 f0       	brcs	.+14     	; 0x1638 <__divsf3_pse+0x26>
    162a:	9f 5f       	subi	r25, 0xFF	; 255
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	44 1f       	adc	r20, r20
    1634:	aa 1f       	adc	r26, r26
    1636:	a9 f3       	breq	.-22     	; 0x1622 <__divsf3_pse+0x10>
    1638:	35 d0       	rcall	.+106    	; 0x16a4 <__divsf3_pse+0x92>
    163a:	0e 2e       	mov	r0, r30
    163c:	3a f0       	brmi	.+14     	; 0x164c <__divsf3_pse+0x3a>
    163e:	e0 e8       	ldi	r30, 0x80	; 128
    1640:	32 d0       	rcall	.+100    	; 0x16a6 <__divsf3_pse+0x94>
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	e6 95       	lsr	r30
    1648:	00 1c       	adc	r0, r0
    164a:	ca f7       	brpl	.-14     	; 0x163e <__divsf3_pse+0x2c>
    164c:	2b d0       	rcall	.+86     	; 0x16a4 <__divsf3_pse+0x92>
    164e:	fe 2f       	mov	r31, r30
    1650:	29 d0       	rcall	.+82     	; 0x16a4 <__divsf3_pse+0x92>
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	bb 1f       	adc	r27, r27
    165a:	26 17       	cp	r18, r22
    165c:	37 07       	cpc	r19, r23
    165e:	48 07       	cpc	r20, r24
    1660:	ab 07       	cpc	r26, r27
    1662:	b0 e8       	ldi	r27, 0x80	; 128
    1664:	09 f0       	breq	.+2      	; 0x1668 <__divsf3_pse+0x56>
    1666:	bb 0b       	sbc	r27, r27
    1668:	80 2d       	mov	r24, r0
    166a:	bf 01       	movw	r22, r30
    166c:	ff 27       	eor	r31, r31
    166e:	93 58       	subi	r25, 0x83	; 131
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	3a f0       	brmi	.+14     	; 0x1682 <__divsf3_pse+0x70>
    1674:	9e 3f       	cpi	r25, 0xFE	; 254
    1676:	51 05       	cpc	r21, r1
    1678:	78 f0       	brcs	.+30     	; 0x1698 <__divsf3_pse+0x86>
    167a:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_inf>
    167e:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_szero>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	e4 f3       	brlt	.-8      	; 0x167e <__divsf3_pse+0x6c>
    1686:	98 3e       	cpi	r25, 0xE8	; 232
    1688:	d4 f3       	brlt	.-12     	; 0x167e <__divsf3_pse+0x6c>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b7 95       	ror	r27
    1692:	f7 95       	ror	r31
    1694:	9f 5f       	subi	r25, 0xFF	; 255
    1696:	c9 f7       	brne	.-14     	; 0x168a <__divsf3_pse+0x78>
    1698:	88 0f       	add	r24, r24
    169a:	91 1d       	adc	r25, r1
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	97 f9       	bld	r25, 7
    16a2:	08 95       	ret
    16a4:	e1 e0       	ldi	r30, 0x01	; 1
    16a6:	66 0f       	add	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	bb 1f       	adc	r27, r27
    16ae:	62 17       	cp	r22, r18
    16b0:	73 07       	cpc	r23, r19
    16b2:	84 07       	cpc	r24, r20
    16b4:	ba 07       	cpc	r27, r26
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <__divsf3_pse+0xae>
    16b8:	62 1b       	sub	r22, r18
    16ba:	73 0b       	sbc	r23, r19
    16bc:	84 0b       	sbc	r24, r20
    16be:	ba 0b       	sbc	r27, r26
    16c0:	ee 1f       	adc	r30, r30
    16c2:	88 f7       	brcc	.-30     	; 0x16a6 <__divsf3_pse+0x94>
    16c4:	e0 95       	com	r30
    16c6:	08 95       	ret

000016c8 <__fixunssfsi>:
    16c8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fp_splitA>
    16cc:	88 f0       	brcs	.+34     	; 0x16f0 <__fixunssfsi+0x28>
    16ce:	9f 57       	subi	r25, 0x7F	; 127
    16d0:	98 f0       	brcs	.+38     	; 0x16f8 <__fixunssfsi+0x30>
    16d2:	b9 2f       	mov	r27, r25
    16d4:	99 27       	eor	r25, r25
    16d6:	b7 51       	subi	r27, 0x17	; 23
    16d8:	b0 f0       	brcs	.+44     	; 0x1706 <__fixunssfsi+0x3e>
    16da:	e1 f0       	breq	.+56     	; 0x1714 <__fixunssfsi+0x4c>
    16dc:	66 0f       	add	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	1a f0       	brmi	.+6      	; 0x16ec <__fixunssfsi+0x24>
    16e6:	ba 95       	dec	r27
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <__fixunssfsi+0x14>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <__fixunssfsi+0x4c>
    16ec:	b1 30       	cpi	r27, 0x01	; 1
    16ee:	91 f0       	breq	.+36     	; 0x1714 <__fixunssfsi+0x4c>
    16f0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__fp_zero>
    16f4:	b1 e0       	ldi	r27, 0x01	; 1
    16f6:	08 95       	ret
    16f8:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_zero>
    16fc:	67 2f       	mov	r22, r23
    16fe:	78 2f       	mov	r23, r24
    1700:	88 27       	eor	r24, r24
    1702:	b8 5f       	subi	r27, 0xF8	; 248
    1704:	39 f0       	breq	.+14     	; 0x1714 <__fixunssfsi+0x4c>
    1706:	b9 3f       	cpi	r27, 0xF9	; 249
    1708:	cc f3       	brlt	.-14     	; 0x16fc <__fixunssfsi+0x34>
    170a:	86 95       	lsr	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	b3 95       	inc	r27
    1712:	d9 f7       	brne	.-10     	; 0x170a <__fixunssfsi+0x42>
    1714:	3e f4       	brtc	.+14     	; 0x1724 <__fixunssfsi+0x5c>
    1716:	90 95       	com	r25
    1718:	80 95       	com	r24
    171a:	70 95       	com	r23
    171c:	61 95       	neg	r22
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	08 95       	ret

00001726 <__fp_inf>:
    1726:	97 f9       	bld	r25, 7
    1728:	9f 67       	ori	r25, 0x7F	; 127
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	08 95       	ret

00001732 <__fp_nan>:
    1732:	9f ef       	ldi	r25, 0xFF	; 255
    1734:	80 ec       	ldi	r24, 0xC0	; 192
    1736:	08 95       	ret

00001738 <__fp_pscA>:
    1738:	00 24       	eor	r0, r0
    173a:	0a 94       	dec	r0
    173c:	16 16       	cp	r1, r22
    173e:	17 06       	cpc	r1, r23
    1740:	18 06       	cpc	r1, r24
    1742:	09 06       	cpc	r0, r25
    1744:	08 95       	ret

00001746 <__fp_pscB>:
    1746:	00 24       	eor	r0, r0
    1748:	0a 94       	dec	r0
    174a:	12 16       	cp	r1, r18
    174c:	13 06       	cpc	r1, r19
    174e:	14 06       	cpc	r1, r20
    1750:	05 06       	cpc	r0, r21
    1752:	08 95       	ret

00001754 <__fp_round>:
    1754:	09 2e       	mov	r0, r25
    1756:	03 94       	inc	r0
    1758:	00 0c       	add	r0, r0
    175a:	11 f4       	brne	.+4      	; 0x1760 <__fp_round+0xc>
    175c:	88 23       	and	r24, r24
    175e:	52 f0       	brmi	.+20     	; 0x1774 <__fp_round+0x20>
    1760:	bb 0f       	add	r27, r27
    1762:	40 f4       	brcc	.+16     	; 0x1774 <__fp_round+0x20>
    1764:	bf 2b       	or	r27, r31
    1766:	11 f4       	brne	.+4      	; 0x176c <__fp_round+0x18>
    1768:	60 ff       	sbrs	r22, 0
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <__fp_round+0x20>
    176c:	6f 5f       	subi	r22, 0xFF	; 255
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	08 95       	ret

00001776 <__fp_split3>:
    1776:	57 fd       	sbrc	r21, 7
    1778:	90 58       	subi	r25, 0x80	; 128
    177a:	44 0f       	add	r20, r20
    177c:	55 1f       	adc	r21, r21
    177e:	59 f0       	breq	.+22     	; 0x1796 <__fp_splitA+0x10>
    1780:	5f 3f       	cpi	r21, 0xFF	; 255
    1782:	71 f0       	breq	.+28     	; 0x17a0 <__fp_splitA+0x1a>
    1784:	47 95       	ror	r20

00001786 <__fp_splitA>:
    1786:	88 0f       	add	r24, r24
    1788:	97 fb       	bst	r25, 7
    178a:	99 1f       	adc	r25, r25
    178c:	61 f0       	breq	.+24     	; 0x17a6 <__fp_splitA+0x20>
    178e:	9f 3f       	cpi	r25, 0xFF	; 255
    1790:	79 f0       	breq	.+30     	; 0x17b0 <__fp_splitA+0x2a>
    1792:	87 95       	ror	r24
    1794:	08 95       	ret
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	14 06       	cpc	r1, r20
    179c:	55 1f       	adc	r21, r21
    179e:	f2 cf       	rjmp	.-28     	; 0x1784 <__fp_split3+0xe>
    17a0:	46 95       	lsr	r20
    17a2:	f1 df       	rcall	.-30     	; 0x1786 <__fp_splitA>
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <__fp_splitA+0x30>
    17a6:	16 16       	cp	r1, r22
    17a8:	17 06       	cpc	r1, r23
    17aa:	18 06       	cpc	r1, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	f1 cf       	rjmp	.-30     	; 0x1792 <__fp_splitA+0xc>
    17b0:	86 95       	lsr	r24
    17b2:	71 05       	cpc	r23, r1
    17b4:	61 05       	cpc	r22, r1
    17b6:	08 94       	sec
    17b8:	08 95       	ret

000017ba <__fp_zero>:
    17ba:	e8 94       	clt

000017bc <__fp_szero>:
    17bc:	bb 27       	eor	r27, r27
    17be:	66 27       	eor	r22, r22
    17c0:	77 27       	eor	r23, r23
    17c2:	cb 01       	movw	r24, r22
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret

000017c8 <__gesf2>:
    17c8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_cmp>
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <__gesf2+0x8>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	08 95       	ret

000017d2 <__mulsf3>:
    17d2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__mulsf3x>
    17d6:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__fp_round>
    17da:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__fp_pscA>
    17de:	38 f0       	brcs	.+14     	; 0x17ee <__mulsf3+0x1c>
    17e0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_pscB>
    17e4:	20 f0       	brcs	.+8      	; 0x17ee <__mulsf3+0x1c>
    17e6:	95 23       	and	r25, r21
    17e8:	11 f0       	breq	.+4      	; 0x17ee <__mulsf3+0x1c>
    17ea:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_inf>
    17ee:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_nan>
    17f2:	11 24       	eor	r1, r1
    17f4:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_szero>

000017f8 <__mulsf3x>:
    17f8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__fp_split3>
    17fc:	70 f3       	brcs	.-36     	; 0x17da <__mulsf3+0x8>

000017fe <__mulsf3_pse>:
    17fe:	95 9f       	mul	r25, r21
    1800:	c1 f3       	breq	.-16     	; 0x17f2 <__mulsf3+0x20>
    1802:	95 0f       	add	r25, r21
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	55 1f       	adc	r21, r21
    1808:	62 9f       	mul	r22, r18
    180a:	f0 01       	movw	r30, r0
    180c:	72 9f       	mul	r23, r18
    180e:	bb 27       	eor	r27, r27
    1810:	f0 0d       	add	r31, r0
    1812:	b1 1d       	adc	r27, r1
    1814:	63 9f       	mul	r22, r19
    1816:	aa 27       	eor	r26, r26
    1818:	f0 0d       	add	r31, r0
    181a:	b1 1d       	adc	r27, r1
    181c:	aa 1f       	adc	r26, r26
    181e:	64 9f       	mul	r22, r20
    1820:	66 27       	eor	r22, r22
    1822:	b0 0d       	add	r27, r0
    1824:	a1 1d       	adc	r26, r1
    1826:	66 1f       	adc	r22, r22
    1828:	82 9f       	mul	r24, r18
    182a:	22 27       	eor	r18, r18
    182c:	b0 0d       	add	r27, r0
    182e:	a1 1d       	adc	r26, r1
    1830:	62 1f       	adc	r22, r18
    1832:	73 9f       	mul	r23, r19
    1834:	b0 0d       	add	r27, r0
    1836:	a1 1d       	adc	r26, r1
    1838:	62 1f       	adc	r22, r18
    183a:	83 9f       	mul	r24, r19
    183c:	a0 0d       	add	r26, r0
    183e:	61 1d       	adc	r22, r1
    1840:	22 1f       	adc	r18, r18
    1842:	74 9f       	mul	r23, r20
    1844:	33 27       	eor	r19, r19
    1846:	a0 0d       	add	r26, r0
    1848:	61 1d       	adc	r22, r1
    184a:	23 1f       	adc	r18, r19
    184c:	84 9f       	mul	r24, r20
    184e:	60 0d       	add	r22, r0
    1850:	21 1d       	adc	r18, r1
    1852:	82 2f       	mov	r24, r18
    1854:	76 2f       	mov	r23, r22
    1856:	6a 2f       	mov	r22, r26
    1858:	11 24       	eor	r1, r1
    185a:	9f 57       	subi	r25, 0x7F	; 127
    185c:	50 40       	sbci	r21, 0x00	; 0
    185e:	9a f0       	brmi	.+38     	; 0x1886 <__mulsf3_pse+0x88>
    1860:	f1 f0       	breq	.+60     	; 0x189e <__mulsf3_pse+0xa0>
    1862:	88 23       	and	r24, r24
    1864:	4a f0       	brmi	.+18     	; 0x1878 <__mulsf3_pse+0x7a>
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	bb 1f       	adc	r27, r27
    186c:	66 1f       	adc	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	91 50       	subi	r25, 0x01	; 1
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	a9 f7       	brne	.-22     	; 0x1862 <__mulsf3_pse+0x64>
    1878:	9e 3f       	cpi	r25, 0xFE	; 254
    187a:	51 05       	cpc	r21, r1
    187c:	80 f0       	brcs	.+32     	; 0x189e <__mulsf3_pse+0xa0>
    187e:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_inf>
    1882:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_szero>
    1886:	5f 3f       	cpi	r21, 0xFF	; 255
    1888:	e4 f3       	brlt	.-8      	; 0x1882 <__mulsf3_pse+0x84>
    188a:	98 3e       	cpi	r25, 0xE8	; 232
    188c:	d4 f3       	brlt	.-12     	; 0x1882 <__mulsf3_pse+0x84>
    188e:	86 95       	lsr	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	f7 95       	ror	r31
    1898:	e7 95       	ror	r30
    189a:	9f 5f       	subi	r25, 0xFF	; 255
    189c:	c1 f7       	brne	.-16     	; 0x188e <__mulsf3_pse+0x90>
    189e:	fe 2b       	or	r31, r30
    18a0:	88 0f       	add	r24, r24
    18a2:	91 1d       	adc	r25, r1
    18a4:	96 95       	lsr	r25
    18a6:	87 95       	ror	r24
    18a8:	97 f9       	bld	r25, 7
    18aa:	08 95       	ret

000018ac <__fp_cmp>:
    18ac:	99 0f       	add	r25, r25
    18ae:	00 08       	sbc	r0, r0
    18b0:	55 0f       	add	r21, r21
    18b2:	aa 0b       	sbc	r26, r26
    18b4:	e0 e8       	ldi	r30, 0x80	; 128
    18b6:	fe ef       	ldi	r31, 0xFE	; 254
    18b8:	16 16       	cp	r1, r22
    18ba:	17 06       	cpc	r1, r23
    18bc:	e8 07       	cpc	r30, r24
    18be:	f9 07       	cpc	r31, r25
    18c0:	c0 f0       	brcs	.+48     	; 0x18f2 <__fp_cmp+0x46>
    18c2:	12 16       	cp	r1, r18
    18c4:	13 06       	cpc	r1, r19
    18c6:	e4 07       	cpc	r30, r20
    18c8:	f5 07       	cpc	r31, r21
    18ca:	98 f0       	brcs	.+38     	; 0x18f2 <__fp_cmp+0x46>
    18cc:	62 1b       	sub	r22, r18
    18ce:	73 0b       	sbc	r23, r19
    18d0:	84 0b       	sbc	r24, r20
    18d2:	95 0b       	sbc	r25, r21
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <__fp_cmp+0x38>
    18d6:	0a 26       	eor	r0, r26
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <__fp_cmp+0x46>
    18da:	23 2b       	or	r18, r19
    18dc:	24 2b       	or	r18, r20
    18de:	25 2b       	or	r18, r21
    18e0:	21 f4       	brne	.+8      	; 0x18ea <__fp_cmp+0x3e>
    18e2:	08 95       	ret
    18e4:	0a 26       	eor	r0, r26
    18e6:	09 f4       	brne	.+2      	; 0x18ea <__fp_cmp+0x3e>
    18e8:	a1 40       	sbci	r26, 0x01	; 1
    18ea:	a6 95       	lsr	r26
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	81 1d       	adc	r24, r1
    18f0:	81 1d       	adc	r24, r1
    18f2:	08 95       	ret

000018f4 <calloc>:
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	86 9f       	mul	r24, r22
    18fe:	80 01       	movw	r16, r0
    1900:	87 9f       	mul	r24, r23
    1902:	10 0d       	add	r17, r0
    1904:	96 9f       	mul	r25, r22
    1906:	10 0d       	add	r17, r0
    1908:	11 24       	eor	r1, r1
    190a:	c8 01       	movw	r24, r16
    190c:	0e 94 96 0c 	call	0x192c	; 0x192c <malloc>
    1910:	ec 01       	movw	r28, r24
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <calloc+0x2c>
    1916:	a8 01       	movw	r20, r16
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <memset>
    1920:	ce 01       	movw	r24, r28
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <malloc>:
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	82 30       	cpi	r24, 0x02	; 2
    1936:	91 05       	cpc	r25, r1
    1938:	10 f4       	brcc	.+4      	; 0x193e <malloc+0x12>
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__flp>
    1942:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__flp+0x1>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	30 97       	sbiw	r30, 0x00	; 0
    1950:	19 f1       	breq	.+70     	; 0x1998 <malloc+0x6c>
    1952:	40 81       	ld	r20, Z
    1954:	51 81       	ldd	r21, Z+1	; 0x01
    1956:	02 81       	ldd	r16, Z+2	; 0x02
    1958:	13 81       	ldd	r17, Z+3	; 0x03
    195a:	48 17       	cp	r20, r24
    195c:	59 07       	cpc	r21, r25
    195e:	c8 f0       	brcs	.+50     	; 0x1992 <malloc+0x66>
    1960:	84 17       	cp	r24, r20
    1962:	95 07       	cpc	r25, r21
    1964:	69 f4       	brne	.+26     	; 0x1980 <malloc+0x54>
    1966:	10 97       	sbiw	r26, 0x00	; 0
    1968:	31 f0       	breq	.+12     	; 0x1976 <malloc+0x4a>
    196a:	12 96       	adiw	r26, 0x02	; 2
    196c:	0c 93       	st	X, r16
    196e:	12 97       	sbiw	r26, 0x02	; 2
    1970:	13 96       	adiw	r26, 0x03	; 3
    1972:	1c 93       	st	X, r17
    1974:	27 c0       	rjmp	.+78     	; 0x19c4 <malloc+0x98>
    1976:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <__flp>
    197a:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <__flp+0x1>
    197e:	22 c0       	rjmp	.+68     	; 0x19c4 <malloc+0x98>
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	19 f0       	breq	.+6      	; 0x198c <malloc+0x60>
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	18 f4       	brcc	.+6      	; 0x1992 <malloc+0x66>
    198c:	9a 01       	movw	r18, r20
    198e:	bd 01       	movw	r22, r26
    1990:	ef 01       	movw	r28, r30
    1992:	df 01       	movw	r26, r30
    1994:	f8 01       	movw	r30, r16
    1996:	db cf       	rjmp	.-74     	; 0x194e <malloc+0x22>
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	f9 f0       	breq	.+62     	; 0x19dc <malloc+0xb0>
    199e:	28 1b       	sub	r18, r24
    19a0:	39 0b       	sbc	r19, r25
    19a2:	24 30       	cpi	r18, 0x04	; 4
    19a4:	31 05       	cpc	r19, r1
    19a6:	80 f4       	brcc	.+32     	; 0x19c8 <malloc+0x9c>
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03
    19ac:	61 15       	cp	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	21 f0       	breq	.+8      	; 0x19ba <malloc+0x8e>
    19b2:	fb 01       	movw	r30, r22
    19b4:	93 83       	std	Z+3, r25	; 0x03
    19b6:	82 83       	std	Z+2, r24	; 0x02
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <malloc+0x96>
    19ba:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__flp+0x1>
    19be:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__flp>
    19c2:	fe 01       	movw	r30, r28
    19c4:	32 96       	adiw	r30, 0x02	; 2
    19c6:	44 c0       	rjmp	.+136    	; 0x1a50 <malloc+0x124>
    19c8:	fe 01       	movw	r30, r28
    19ca:	e2 0f       	add	r30, r18
    19cc:	f3 1f       	adc	r31, r19
    19ce:	81 93       	st	Z+, r24
    19d0:	91 93       	st	Z+, r25
    19d2:	22 50       	subi	r18, 0x02	; 2
    19d4:	31 09       	sbc	r19, r1
    19d6:	39 83       	std	Y+1, r19	; 0x01
    19d8:	28 83       	st	Y, r18
    19da:	3a c0       	rjmp	.+116    	; 0x1a50 <malloc+0x124>
    19dc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    19e0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    19e4:	23 2b       	or	r18, r19
    19e6:	41 f4       	brne	.+16     	; 0x19f8 <malloc+0xcc>
    19e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    19ec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    19f0:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__brkval+0x1>
    19f4:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__brkval>
    19f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19fc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	41 f4       	brne	.+16     	; 0x1a16 <malloc+0xea>
    1a06:	2d b7       	in	r18, 0x3d	; 61
    1a08:	3e b7       	in	r19, 0x3e	; 62
    1a0a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1a0e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1a12:	24 1b       	sub	r18, r20
    1a14:	35 0b       	sbc	r19, r21
    1a16:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__brkval>
    1a1a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__brkval+0x1>
    1a1e:	e2 17       	cp	r30, r18
    1a20:	f3 07       	cpc	r31, r19
    1a22:	a0 f4       	brcc	.+40     	; 0x1a4c <malloc+0x120>
    1a24:	2e 1b       	sub	r18, r30
    1a26:	3f 0b       	sbc	r19, r31
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	78 f0       	brcs	.+30     	; 0x1a4c <malloc+0x120>
    1a2e:	ac 01       	movw	r20, r24
    1a30:	4e 5f       	subi	r20, 0xFE	; 254
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	24 17       	cp	r18, r20
    1a36:	35 07       	cpc	r19, r21
    1a38:	48 f0       	brcs	.+18     	; 0x1a4c <malloc+0x120>
    1a3a:	4e 0f       	add	r20, r30
    1a3c:	5f 1f       	adc	r21, r31
    1a3e:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <__brkval+0x1>
    1a42:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <__brkval>
    1a46:	81 93       	st	Z+, r24
    1a48:	91 93       	st	Z+, r25
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <malloc+0x124>
    1a4c:	e0 e0       	ldi	r30, 0x00	; 0
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	cf 01       	movw	r24, r30
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	08 95       	ret

00001a5c <free>:
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <free+0xa>
    1a64:	81 c0       	rjmp	.+258    	; 0x1b68 <free+0x10c>
    1a66:	fc 01       	movw	r30, r24
    1a68:	32 97       	sbiw	r30, 0x02	; 2
    1a6a:	13 82       	std	Z+3, r1	; 0x03
    1a6c:	12 82       	std	Z+2, r1	; 0x02
    1a6e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__flp>
    1a72:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__flp+0x1>
    1a76:	10 97       	sbiw	r26, 0x00	; 0
    1a78:	81 f4       	brne	.+32     	; 0x1a9a <free+0x3e>
    1a7a:	20 81       	ld	r18, Z
    1a7c:	31 81       	ldd	r19, Z+1	; 0x01
    1a7e:	82 0f       	add	r24, r18
    1a80:	93 1f       	adc	r25, r19
    1a82:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    1a86:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	51 f5       	brne	.+84     	; 0x1ae4 <free+0x88>
    1a90:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__brkval+0x1>
    1a94:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__brkval>
    1a98:	67 c0       	rjmp	.+206    	; 0x1b68 <free+0x10c>
    1a9a:	ed 01       	movw	r28, r26
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	ce 17       	cp	r28, r30
    1aa2:	df 07       	cpc	r29, r31
    1aa4:	40 f4       	brcc	.+16     	; 0x1ab6 <free+0x5a>
    1aa6:	4a 81       	ldd	r20, Y+2	; 0x02
    1aa8:	5b 81       	ldd	r21, Y+3	; 0x03
    1aaa:	9e 01       	movw	r18, r28
    1aac:	41 15       	cp	r20, r1
    1aae:	51 05       	cpc	r21, r1
    1ab0:	f1 f0       	breq	.+60     	; 0x1aee <free+0x92>
    1ab2:	ea 01       	movw	r28, r20
    1ab4:	f5 cf       	rjmp	.-22     	; 0x1aa0 <free+0x44>
    1ab6:	d3 83       	std	Z+3, r29	; 0x03
    1ab8:	c2 83       	std	Z+2, r28	; 0x02
    1aba:	40 81       	ld	r20, Z
    1abc:	51 81       	ldd	r21, Z+1	; 0x01
    1abe:	84 0f       	add	r24, r20
    1ac0:	95 1f       	adc	r25, r21
    1ac2:	c8 17       	cp	r28, r24
    1ac4:	d9 07       	cpc	r29, r25
    1ac6:	59 f4       	brne	.+22     	; 0x1ade <free+0x82>
    1ac8:	88 81       	ld	r24, Y
    1aca:	99 81       	ldd	r25, Y+1	; 0x01
    1acc:	84 0f       	add	r24, r20
    1ace:	95 1f       	adc	r25, r21
    1ad0:	02 96       	adiw	r24, 0x02	; 2
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	93 83       	std	Z+3, r25	; 0x03
    1adc:	82 83       	std	Z+2, r24	; 0x02
    1ade:	21 15       	cp	r18, r1
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <free+0x92>
    1ae4:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__flp+0x1>
    1ae8:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__flp>
    1aec:	3d c0       	rjmp	.+122    	; 0x1b68 <free+0x10c>
    1aee:	e9 01       	movw	r28, r18
    1af0:	fb 83       	std	Y+3, r31	; 0x03
    1af2:	ea 83       	std	Y+2, r30	; 0x02
    1af4:	49 91       	ld	r20, Y+
    1af6:	59 91       	ld	r21, Y+
    1af8:	c4 0f       	add	r28, r20
    1afa:	d5 1f       	adc	r29, r21
    1afc:	ec 17       	cp	r30, r28
    1afe:	fd 07       	cpc	r31, r29
    1b00:	61 f4       	brne	.+24     	; 0x1b1a <free+0xbe>
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	84 0f       	add	r24, r20
    1b08:	95 1f       	adc	r25, r21
    1b0a:	02 96       	adiw	r24, 0x02	; 2
    1b0c:	e9 01       	movw	r28, r18
    1b0e:	99 83       	std	Y+1, r25	; 0x01
    1b10:	88 83       	st	Y, r24
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	9b 83       	std	Y+3, r25	; 0x03
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	e0 e0       	ldi	r30, 0x00	; 0
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	13 97       	sbiw	r26, 0x03	; 3
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	19 f0       	breq	.+6      	; 0x1b30 <free+0xd4>
    1b2a:	fd 01       	movw	r30, r26
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	f7 cf       	rjmp	.-18     	; 0x1b1e <free+0xc2>
    1b30:	8d 91       	ld	r24, X+
    1b32:	9c 91       	ld	r25, X
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	9d 01       	movw	r18, r26
    1b38:	2e 5f       	subi	r18, 0xFE	; 254
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	82 0f       	add	r24, r18
    1b3e:	93 1f       	adc	r25, r19
    1b40:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    1b44:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1b48:	28 17       	cp	r18, r24
    1b4a:	39 07       	cpc	r19, r25
    1b4c:	69 f4       	brne	.+26     	; 0x1b68 <free+0x10c>
    1b4e:	30 97       	sbiw	r30, 0x00	; 0
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <free+0x100>
    1b52:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__flp+0x1>
    1b56:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__flp>
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <free+0x104>
    1b5c:	13 82       	std	Z+3, r1	; 0x03
    1b5e:	12 82       	std	Z+2, r1	; 0x02
    1b60:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__brkval+0x1>
    1b64:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__brkval>
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <memset>:
    1b6e:	dc 01       	movw	r26, r24
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <memset+0x6>
    1b72:	6d 93       	st	X+, r22
    1b74:	41 50       	subi	r20, 0x01	; 1
    1b76:	50 40       	sbci	r21, 0x00	; 0
    1b78:	e0 f7       	brcc	.-8      	; 0x1b72 <memset+0x4>
    1b7a:	08 95       	ret

00001b7c <_exit>:
    1b7c:	f8 94       	cli

00001b7e <__stop_program>:
    1b7e:	ff cf       	rjmp	.-2      	; 0x1b7e <__stop_program>
